{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "8B-tl3r2GkPR"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {}
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "### ***Data Report***"
      ],
      "metadata": {
        "id": "YkVSBazjfMfP"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "da73822e-1ef1-426a-8dee-40f01aab7187",
        "outputId": "5f999096-a1a4-46e6-f087-5a28776dd2f0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Data Information:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 11550 entries, 0 to 11549\n",
            "Data columns (total 2 columns):\n",
            " #   Column            Non-Null Count  Dtype \n",
            "---  ------            --------------  ----- \n",
            " 0   condition_label   11550 non-null  int64 \n",
            " 1   medical_abstract  11550 non-null  object\n",
            "dtypes: int64(1), object(1)\n",
            "memory usage: 180.6+ KB\n",
            "None\n",
            "\n",
            "Class Distribution:\n",
            "condition_label\n",
            "5    3844\n",
            "1    2530\n",
            "4    2441\n",
            "3    1540\n",
            "2    1195\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Vocabulary Size: 35706\n",
            "Example Sequence: [184, 166, 2026, 7736, 2878, 6, 2321, 376, 7, 1319, 1, 128, 2, 21, 6843, 937, 1, 1990, 1087, 6, 1024, 11, 7476, 1, 4, 760, 3, 4, 564, 174, 2, 1, 60, 62, 5, 1, 4856, 1027, 4, 248, 666, 1, 60, 10, 569, 3, 1225, 4, 1068, 11, 2089, 1568, 2, 109, 1022, 14, 124, 2514, 174, 273, 25, 164, 23, 204, 23, 1, 143, 2, 260, 619, 2116, 7, 1, 60, 4, 760, 12, 4, 564, 1, 2514, 158, 23, 458, 15, 1489, 18, 3, 1735, 2552, 174, 5786, 1, 5316, 1204, 2, 4856, 3, 1, 2448, 1072, 3, 1300, 609, 20, 1, 109, 2, 2213, 98, 1, 450, 57, 58, 5316, 532, 3, 1519, 4856, 1870, 14, 1, 2321, 376, 13, 2433, 11, 7476, 1, 672, 2, 2143, 191, 6, 2321, 376, 5317, 1, 41, 2, 379, 4857, 706, 1673, 5, 1, 5536, 7236, 2, 5318, 12, 5666, 1, 4856, 1027]\n",
            "Empty Sequences Count: 0\n",
            "\n",
            "Sequence Length Distribution:\n",
            "count    11550.000000\n",
            "mean       178.129177\n",
            "std         77.719060\n",
            "min         24.000000\n",
            "25%        119.000000\n",
            "50%        173.000000\n",
            "75%        233.000000\n",
            "max        585.000000\n",
            "dtype: float64\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the dataset\n",
        "data = pd.read_csv('data.csv')\n",
        "\n",
        "# Print basic info and class distribution\n",
        "print(\"Data Information:\")\n",
        "print(data.info())\n",
        "print(\"\\nClass Distribution:\")\n",
        "print(data['condition_label'].value_counts())\n",
        "\n",
        "# Assuming use of Tokenizer and sequences from previous steps\n",
        "tokenizer = Tokenizer(num_words=10000)\n",
        "tokenizer.fit_on_texts(data['medical_abstract'])\n",
        "sequences = tokenizer.texts_to_sequences(data['medical_abstract'])\n",
        "word_index = tokenizer.word_index\n",
        "\n",
        "# Print details about the tokenization\n",
        "print(\"\\nVocabulary Size:\", len(word_index))\n",
        "print(\"Example Sequence:\", sequences[0])\n",
        "\n",
        "# Check for empty sequences which can affect training\n",
        "empty_sequence_count = sum(1 for seq in sequences if not seq)\n",
        "print(\"Empty Sequences Count:\", empty_sequence_count)\n",
        "\n",
        "# Show distribution of sequence lengths to decide on a padding strategy\n",
        "sequence_lengths = [len(seq) for seq in sequences]\n",
        "print(\"\\nSequence Length Distribution:\")\n",
        "print(pd.Series(sequence_lengths).describe())\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ***BERT***"
      ],
      "metadata": {
        "id": "fqrvpzBuXgwr"
      }
    },
    {
      "source": [
        "\n",
        "# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES\n",
        "# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,\n",
        "# THEN FEEL FREE TO DELETE THIS CELL.\n",
        "# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n",
        "# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n",
        "# NOTEBOOK.\n",
        "\n",
        "import os\n",
        "import sys\n",
        "from tempfile import NamedTemporaryFile\n",
        "from urllib.request import urlopen\n",
        "from urllib.parse import unquote, urlparse\n",
        "from urllib.error import HTTPError\n",
        "from zipfile import ZipFile\n",
        "import tarfile\n",
        "import shutil\n",
        "\n",
        "CHUNK_SIZE = 40960\n",
        "DATA_SOURCE_MAPPING = 'medical-text:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F4941176%2F8318937%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240506%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240506T153315Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D76781938fe31eed80ea65b95c4b0bc5c050d25771eddcb9a826a33da86984878f4db594f760515932e6291f4f781e9e788f124f9c973935c6ee23f793482d0b38fc4bf123ee2f03f5dc0427f572dff7f7c84c0ced6f72bf092e2f51dee08fca9a8eeede001596bb5fab98ac7de5f5bced29ce1a78beaf07e5746b6d7db4581d284e625045a4010c83cc4cd077debaaedcfa805164a3fffa5fc848173523c62174407aa952590cf59b1658de3ef6fca783ddde9e1294add8b03bcf295493aea053d403553d1ed7380ccfb75904ec29c8e47fa9fbb6e7ac9a355732a2a952479a13c249f105da5458df37094ae193c60fc34e3ffb3f2c0e81402c35bb00aa9528b'\n",
        "\n",
        "KAGGLE_INPUT_PATH='/kaggle/input'\n",
        "KAGGLE_WORKING_PATH='/kaggle/working'\n",
        "KAGGLE_SYMLINK='kaggle'\n",
        "\n",
        "!umount /kaggle/input/ 2> /dev/null\n",
        "shutil.rmtree('/kaggle/input', ignore_errors=True)\n",
        "os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)\n",
        "os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)\n",
        "\n",
        "try:\n",
        "  os.symlink(KAGGLE_INPUT_PATH, os.path.join(\"..\", 'input'), target_is_directory=True)\n",
        "except FileExistsError:\n",
        "  pass\n",
        "try:\n",
        "  os.symlink(KAGGLE_WORKING_PATH, os.path.join(\"..\", 'working'), target_is_directory=True)\n",
        "except FileExistsError:\n",
        "  pass\n",
        "\n",
        "for data_source_mapping in DATA_SOURCE_MAPPING.split(','):\n",
        "    directory, download_url_encoded = data_source_mapping.split(':')\n",
        "    download_url = unquote(download_url_encoded)\n",
        "    filename = urlparse(download_url).path\n",
        "    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)\n",
        "    try:\n",
        "        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:\n",
        "            total_length = fileres.headers['content-length']\n",
        "            print(f'Downloading {directory}, {total_length} bytes compressed')\n",
        "            dl = 0\n",
        "            data = fileres.read(CHUNK_SIZE)\n",
        "            while len(data) > 0:\n",
        "                dl += len(data)\n",
        "                tfile.write(data)\n",
        "                done = int(50 * dl / int(total_length))\n",
        "                sys.stdout.write(f\"\\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded\")\n",
        "                sys.stdout.flush()\n",
        "                data = fileres.read(CHUNK_SIZE)\n",
        "            if filename.endswith('.zip'):\n",
        "              with ZipFile(tfile) as zfile:\n",
        "                zfile.extractall(destination_path)\n",
        "            else:\n",
        "              with tarfile.open(tfile.name) as tarfile:\n",
        "                tarfile.extractall(destination_path)\n",
        "            print(f'\\nDownloaded and uncompressed: {directory}')\n",
        "    except HTTPError as e:\n",
        "        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')\n",
        "        continue\n",
        "    except OSError as e:\n",
        "        print(f'Failed to load {download_url} to path {destination_path}')\n",
        "        continue\n",
        "\n",
        "print('Data source import complete.')\n"
      ],
      "metadata": {
        "id": "aaDDucRwib9u"
      },
      "cell_type": "code",
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "trusted": true,
        "id": "ihb9XfQoib9y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "from datasets import load_dataset\n",
        "\n",
        "# Specify the path to your dataset\n",
        "dataset_path = '/kaggle/input/medical-text/data.csv'\n",
        "\n",
        "# Check if the file exists\n",
        "if os.path.exists(dataset_path):\n",
        "    print(\"Dataset found.\")\n",
        "else:\n",
        "    print(\"Dataset not found. Check the file path.\")\n",
        "\n",
        "    from datasets import load_dataset\n",
        "\n",
        "# Load the dataset\n",
        "dataset = load_dataset('csv', data_files=dataset_path)['train']"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-05-06T14:49:52.059329Z",
          "iopub.execute_input": "2024-05-06T14:49:52.059706Z",
          "iopub.status.idle": "2024-05-06T14:49:54.266025Z",
          "shell.execute_reply.started": "2024-05-06T14:49:52.059675Z",
          "shell.execute_reply": "2024-05-06T14:49:54.265122Z"
        },
        "trusted": true,
        "id": "FkGZn36Eib9y",
        "outputId": "195ccffd-eb86-4bc7-ac22-ee678d6e30f4",
        "colab": {
          "referenced_widgets": [
            "d4374c427656432f80c5f3c593a91a78"
          ]
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "text": "Dataset found.\n",
          "output_type": "stream"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "Generating train split: 0 examples [00:00, ? examples/s]",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "d4374c427656432f80c5f3c593a91a78"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from transformers import AutoTokenizer, TFAutoModel\n",
        "from datasets import load_dataset, DatasetDict\n",
        "\n",
        "# Load the tokenizer and model for BERT (you can switch this to DistilBERT or any other model)\n",
        "tokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')\n",
        "model = TFAutoModel.from_pretrained('bert-base-uncased')\n",
        "\n",
        "# Split the dataset into train, validation, and test sets\n",
        "train_test_split = dataset.train_test_split(test_size=0.1)\n",
        "test_val_split = train_test_split['test'].train_test_split(test_size=0.5)\n",
        "split_dataset = DatasetDict({\n",
        "    'train': train_test_split['train'],\n",
        "    'validation': test_val_split['test'],\n",
        "    'test': test_val_split['train']\n",
        "})\n",
        "\n",
        "# Tokenization and converting to TensorFlow format\n",
        "def tokenize_and_format(batch):\n",
        "    tokenized_batch = tokenizer(batch['medical_abstract'], padding='max_length', truncation=True, max_length=512)\n",
        "    tokenized_batch = {k: tf.convert_to_tensor(v) for k, v in tokenized_batch.items()}\n",
        "    tokenized_batch['labels'] = tf.convert_to_tensor(batch['condition_label'])\n",
        "    return tokenized_batch\n",
        "\n",
        "split_dataset = split_dataset.map(tokenize_and_format, batched=True)\n",
        "split_dataset.set_format(type='tensorflow', columns=['input_ids', 'attention_mask', 'labels'])\n",
        "\n",
        "# Function to prepare inputs for BERT\n",
        "def map_example_to_dict(input_ids, attention_mask, labels):\n",
        "    return {\n",
        "        'input_ids': input_ids,\n",
        "        'attention_mask': attention_mask,\n",
        "    }, labels\n",
        "\n",
        "# Prepare TensorFlow datasets\n",
        "batch_size = 16\n",
        "train_dataset = tf.data.Dataset.from_tensor_slices((split_dataset['train']['input_ids'],\n",
        "                                                    split_dataset['train']['attention_mask'],\n",
        "                                                    split_dataset['train']['labels']))\n",
        "train_dataset = train_dataset.map(map_example_to_dict).shuffle(1000).batch(batch_size)\n",
        "\n",
        "validation_dataset = tf.data.Dataset.from_tensor_slices((split_dataset['validation']['input_ids'],\n",
        "                                                         split_dataset['validation']['attention_mask'],\n",
        "                                                         split_dataset['validation']['labels']))\n",
        "validation_dataset = validation_dataset.map(map_example_to_dict).batch(batch_size)\n",
        "\n",
        "test_dataset = tf.data.Dataset.from_tensor_slices((split_dataset['test']['input_ids'],\n",
        "                                                   split_dataset['test']['attention_mask'],\n",
        "                                                   split_dataset['test']['labels']))\n",
        "test_dataset = test_dataset.map(map_example_to_dict).batch(batch_size)\n",
        "\n",
        "# Define the TensorFlow model\n",
        "class BERTForClassification(tf.keras.Model):\n",
        "    def __init__(self, bert_model, num_classes):\n",
        "        super().__init__()\n",
        "        self.bert = bert_model\n",
        "        # In case of using BERT, `bert_model.pooler_output` might be used or use `bert_model.last_hidden_state`\n",
        "        self.classifier = tf.keras.layers.Dense(num_classes, activation='softmax')\n",
        "\n",
        "    def call(self, inputs):\n",
        "        outputs = self.bert(inputs)\n",
        "        # Use pooled output for classification tasks\n",
        "        pooled_output = outputs.pooler_output\n",
        "        return self.classifier(pooled_output)\n",
        "\n",
        "# Initialize the model\n",
        "num_classes = 6  # Adjust based on the number of condition labels\n",
        "classifier = BERTForClassification(model, num_classes=num_classes)\n",
        "\n",
        "# Compile the model\n",
        "classifier.compile(\n",
        "    optimizer=tf.keras.optimizers.Adam(learning_rate=2e-5),\n",
        "    loss=tf.keras.losses.SparseCategoricalCrossentropy(),\n",
        "    metrics=['accuracy']\n",
        ")\n",
        "\n",
        "# Fit the model\n",
        "history = classifier.fit(train_dataset, epochs=3, validation_data=validation_dataset)\n",
        "\n",
        "# Evaluate the model\n",
        "test_results = classifier.evaluate(test_dataset)\n",
        "print(f'Test results - Loss: {test_results[0]} - Accuracy: {test_results[1]*100}%')\n"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-05-06T14:49:54.267565Z",
          "iopub.execute_input": "2024-05-06T14:49:54.268055Z",
          "iopub.status.idle": "2024-05-06T15:28:01.311348Z",
          "shell.execute_reply.started": "2024-05-06T14:49:54.268026Z",
          "shell.execute_reply": "2024-05-06T15:28:01.31047Z"
        },
        "trusted": true,
        "id": "EDCtnqUlib9z",
        "outputId": "6d60c9bb-d67c-4e18-c8b8-8cf622fd16b6",
        "colab": {
          "referenced_widgets": [
            "8d562b7b60284d7498b8370dfe7889e3",
            "d5557566b98143e28e82584ea46db97c",
            "a9ca1e162c5c452d8e9982ad0491f464",
            "cbd2989cbbc444aa9bb9b08490bca413",
            "68e32aebf11345df9bdb4a916f451c4b",
            "5314671f45064997be160c356674d223",
            "2a0e6daa339f4ee8ab41d35e69bed663",
            "7cb60dcce7b84c53829190b937308bcc"
          ]
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stderr",
          "text": "2024-05-06 14:49:55.921088: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-05-06 14:49:55.921207: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-05-06 14:49:56.051861: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
          "output_type": "stream"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "tokenizer_config.json:   0%|          | 0.00/48.0 [00:00<?, ?B/s]",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "8d562b7b60284d7498b8370dfe7889e3"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "config.json:   0%|          | 0.00/570 [00:00<?, ?B/s]",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "d5557566b98143e28e82584ea46db97c"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "a9ca1e162c5c452d8e9982ad0491f464"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "cbd2989cbbc444aa9bb9b08490bca413"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "model.safetensors:   0%|          | 0.00/440M [00:00<?, ?B/s]",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "68e32aebf11345df9bdb4a916f451c4b"
            }
          },
          "metadata": {}
        },
        {
          "name": "stderr",
          "text": "Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFBertModel: ['cls.predictions.transform.LayerNorm.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.seq_relationship.weight', 'cls.predictions.bias', 'cls.seq_relationship.bias', 'cls.predictions.transform.LayerNorm.weight']\n- This IS expected if you are initializing TFBertModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n- This IS NOT expected if you are initializing TFBertModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\nAll the weights of TFBertModel were initialized from the PyTorch model.\nIf your task is similar to the task the model of the checkpoint was trained on, you can already use TFBertModel for predictions without further training.\n",
          "output_type": "stream"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "Map:   0%|          | 0/10395 [00:00<?, ? examples/s]",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "5314671f45064997be160c356674d223"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "Map:   0%|          | 0/578 [00:00<?, ? examples/s]",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "2a0e6daa339f4ee8ab41d35e69bed663"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "Map:   0%|          | 0/577 [00:00<?, ? examples/s]",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "7cb60dcce7b84c53829190b937308bcc"
            }
          },
          "metadata": {}
        },
        {
          "name": "stdout",
          "text": "Epoch 1/3\n",
          "output_type": "stream"
        },
        {
          "name": "stderr",
          "text": "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1715007101.081807     116 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n",
          "output_type": "stream"
        },
        {
          "name": "stdout",
          "text": "650/650 [==============================] - 812s 1s/step - loss: 1.0093 - accuracy: 0.5828 - val_loss: 0.8858 - val_accuracy: 0.6298\nEpoch 2/3\n650/650 [==============================] - 715s 1s/step - loss: 0.7981 - accuracy: 0.6586 - val_loss: 0.8827 - val_accuracy: 0.6211\nEpoch 3/3\n650/650 [==============================] - 714s 1s/step - loss: 0.6990 - accuracy: 0.6925 - val_loss: 0.8997 - val_accuracy: 0.6107\n37/37 [==============================] - 13s 356ms/step - loss: 0.8627 - accuracy: 0.5997\nTest results - Loss: 0.8626721501350403 - Accuracy: 59.965336322784424%\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ***SVM***"
      ],
      "metadata": {
        "id": "zhNNEDsSW33d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.pipeline import Pipeline\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from imblearn.pipeline import Pipeline as ImbPipeline"
      ],
      "metadata": {
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "execution": {
          "iopub.status.busy": "2024-05-05T20:04:14.031838Z",
          "iopub.execute_input": "2024-05-05T20:04:14.032228Z",
          "iopub.status.idle": "2024-05-05T20:04:14.038610Z",
          "shell.execute_reply.started": "2024-05-05T20:04:14.032199Z",
          "shell.execute_reply": "2024-05-05T20:04:14.037481Z"
        },
        "trusted": true,
        "id": "d-mJaeUgXBQg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load data\n",
        "data = pd.read_csv('/kaggle/input/medical-text/data.csv')\n",
        "X = data['medical_abstract']\n",
        "y = data['condition_label']\n",
        "\n",
        "# Create training and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-05-05T20:04:14.040685Z",
          "iopub.execute_input": "2024-05-05T20:04:14.041278Z",
          "iopub.status.idle": "2024-05-05T20:04:14.191382Z",
          "shell.execute_reply.started": "2024-05-05T20:04:14.041249Z",
          "shell.execute_reply": "2024-05-05T20:04:14.190008Z"
        },
        "trusted": true,
        "outputId": "bdf6da8d-e2c9-4fe6-eb17-89af79601b42",
        "id": "PTpjgVW1XBQh"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "text": "Dataset shape: (11550, 2)\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the SVM with adjusted parameters and pipeline\n",
        "pipeline = ImbPipeline([\n",
        "    ('tfidf', TfidfVectorizer(stop_words='english', max_features=1500, ngram_range=(1, 2))),\n",
        "    ('smote', SMOTE(random_state=42)),\n",
        "    ('classifier', SVC(class_weight='balanced'))\n",
        "])\n",
        "\n",
        "# Parameters for GridSearchCV focusing on tighter regularization\n",
        "parameters = {\n",
        "    'classifier__C': [0.1, 1],  # Lower C values for stronger regularization\n",
        "    'classifier__gamma': ['scale', 0.1],  # Scale uses 1 / (n_features * X.var()) as value of gamma\n",
        "    'classifier__kernel': ['rbf']\n",
        "}"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-05-05T20:04:14.193294Z",
          "iopub.execute_input": "2024-05-05T20:04:14.193766Z",
          "iopub.status.idle": "2024-05-05T20:04:14.203327Z",
          "shell.execute_reply.started": "2024-05-05T20:04:14.193725Z",
          "shell.execute_reply": "2024-05-05T20:04:14.201746Z"
        },
        "trusted": true,
        "id": "iJG9vT7pXBQh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Running grid search on the training and validation set\n",
        "grid_search = GridSearchCV(pipeline, parameters, cv=5, scoring='accuracy', verbose=3)\n",
        "grid_search.fit(X_train, y_train)\n",
        "print(\"Grid search complete with best parameters:\", grid_search.best_params_)\n",
        "\n",
        "# Predicting on the validation set\n",
        "y_pred_validate = grid_search.predict(X_validate)\n",
        "\n",
        "# Evaluating the model on the validation set\n",
        "print(\"Validation - Confusion Matrix:\\n\", confusion_matrix(y_validate, y_pred_validate))\n",
        "print(\"Validation - F1 Score:\", f1_score(y_validate, y_pred_validate, average='weighted'))\n",
        "print(\"Validation - Classification Report:\\n\", classification_report(y_validate, y_pred_validate))"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-05-05T20:04:14.206221Z",
          "iopub.execute_input": "2024-05-05T20:04:14.206939Z",
          "iopub.status.idle": "2024-05-05T20:36:39.034075Z",
          "shell.execute_reply.started": "2024-05-05T20:04:14.206889Z",
          "shell.execute_reply": "2024-05-05T20:36:39.032758Z"
        },
        "trusted": true,
        "outputId": "f0798550-86a2-4a4c-983d-848e9609768d",
        "id": "gibBshKzXBQi"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "text": "Fitting 5 folds for each of 6 candidates, totalling 30 fits\n[CV 1/5] END classifier__C=1, classifier__class_weight=balanced, classifier__gamma=0.1, classifier__kernel=rbf;, score=0.613 total time= 1.1min\n[CV 2/5] END classifier__C=1, classifier__class_weight=balanced, classifier__gamma=0.1, classifier__kernel=rbf;, score=0.584 total time= 1.1min\n[CV 3/5] END classifier__C=1, classifier__class_weight=balanced, classifier__gamma=0.1, classifier__kernel=rbf;, score=0.587 total time= 1.1min\n[CV 4/5] END classifier__C=1, classifier__class_weight=balanced, classifier__gamma=0.1, classifier__kernel=rbf;, score=0.612 total time= 1.3min\n[CV 5/5] END classifier__C=1, classifier__class_weight=balanced, classifier__gamma=0.1, classifier__kernel=rbf;, score=0.595 total time= 1.2min\n[CV 1/5] END classifier__C=1, classifier__class_weight=balanced, classifier__gamma=1.0, classifier__kernel=rbf;, score=0.567 total time= 1.0min\n[CV 2/5] END classifier__C=1, classifier__class_weight=balanced, classifier__gamma=1.0, classifier__kernel=rbf;, score=0.539 total time= 1.0min\n[CV 3/5] END classifier__C=1, classifier__class_weight=balanced, classifier__gamma=1.0, classifier__kernel=rbf;, score=0.532 total time= 1.0min\n[CV 4/5] END classifier__C=1, classifier__class_weight=balanced, classifier__gamma=1.0, classifier__kernel=rbf;, score=0.544 total time= 1.1min\n[CV 5/5] END classifier__C=1, classifier__class_weight=balanced, classifier__gamma=1.0, classifier__kernel=rbf;, score=0.546 total time= 1.0min\n[CV 1/5] END classifier__C=1, classifier__class_weight=balanced, classifier__gamma=scale, classifier__kernel=rbf;, score=0.560 total time= 1.0min\n[CV 2/5] END classifier__C=1, classifier__class_weight=balanced, classifier__gamma=scale, classifier__kernel=rbf;, score=0.533 total time= 1.0min\n[CV 3/5] END classifier__C=1, classifier__class_weight=balanced, classifier__gamma=scale, classifier__kernel=rbf;, score=0.531 total time= 1.0min\n[CV 4/5] END classifier__C=1, classifier__class_weight=balanced, classifier__gamma=scale, classifier__kernel=rbf;, score=0.543 total time= 1.0min\n[CV 5/5] END classifier__C=1, classifier__class_weight=balanced, classifier__gamma=scale, classifier__kernel=rbf;, score=0.539 total time= 1.0min\n[CV 1/5] END classifier__C=10, classifier__class_weight=balanced, classifier__gamma=0.1, classifier__kernel=rbf;, score=0.566 total time=  46.0s\n[CV 2/5] END classifier__C=10, classifier__class_weight=balanced, classifier__gamma=0.1, classifier__kernel=rbf;, score=0.538 total time=  45.4s\n[CV 3/5] END classifier__C=10, classifier__class_weight=balanced, classifier__gamma=0.1, classifier__kernel=rbf;, score=0.538 total time=  45.3s\n[CV 4/5] END classifier__C=10, classifier__class_weight=balanced, classifier__gamma=0.1, classifier__kernel=rbf;, score=0.548 total time=  45.7s\n[CV 5/5] END classifier__C=10, classifier__class_weight=balanced, classifier__gamma=0.1, classifier__kernel=rbf;, score=0.535 total time=  44.9s\n[CV 1/5] END classifier__C=10, classifier__class_weight=balanced, classifier__gamma=1.0, classifier__kernel=rbf;, score=0.550 total time= 1.0min\n[CV 2/5] END classifier__C=10, classifier__class_weight=balanced, classifier__gamma=1.0, classifier__kernel=rbf;, score=0.511 total time= 1.0min\n[CV 3/5] END classifier__C=10, classifier__class_weight=balanced, classifier__gamma=1.0, classifier__kernel=rbf;, score=0.509 total time= 1.0min\n[CV 4/5] END classifier__C=10, classifier__class_weight=balanced, classifier__gamma=1.0, classifier__kernel=rbf;, score=0.524 total time= 1.0min\n[CV 5/5] END classifier__C=10, classifier__class_weight=balanced, classifier__gamma=1.0, classifier__kernel=rbf;, score=0.513 total time= 1.1min\n[CV 1/5] END classifier__C=10, classifier__class_weight=balanced, classifier__gamma=scale, classifier__kernel=rbf;, score=0.555 total time= 1.1min\n[CV 2/5] END classifier__C=10, classifier__class_weight=balanced, classifier__gamma=scale, classifier__kernel=rbf;, score=0.514 total time= 1.1min\n[CV 3/5] END classifier__C=10, classifier__class_weight=balanced, classifier__gamma=scale, classifier__kernel=rbf;, score=0.510 total time= 1.1min\n[CV 4/5] END classifier__C=10, classifier__class_weight=balanced, classifier__gamma=scale, classifier__kernel=rbf;, score=0.522 total time= 1.1min\n[CV 5/5] END classifier__C=10, classifier__class_weight=balanced, classifier__gamma=scale, classifier__kernel=rbf;, score=0.518 total time= 1.1min\nGrid search complete with best parameters: {'classifier__C': 1, 'classifier__class_weight': 'balanced', 'classifier__gamma': 0.1, 'classifier__kernel': 'rbf'}\nValidation - Confusion Matrix:\n [[383  34  16   9  84]\n [ 17 127   5   2  79]\n [ 19   6 153  19  99]\n [  9   6  25 346  99]\n [ 98  82  93 126 374]]\nValidation - F1 Score: 0.5978179024268462\nValidation - Classification Report:\n               precision    recall  f1-score   support\n\n           0       0.73      0.73      0.73       526\n           1       0.50      0.55      0.52       230\n           2       0.52      0.52      0.52       296\n           3       0.69      0.71      0.70       485\n           4       0.51      0.48      0.50       773\n\n    accuracy                           0.60      2310\n   macro avg       0.59      0.60      0.59      2310\nweighted avg       0.60      0.60      0.60      2310\n\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "1HRBvhPhXK1I"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ***Neural Network***"
      ],
      "metadata": {
        "id": "W03kLK5zd31l"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IIEUwjGOebax"
      },
      "source": [
        "Preprocessing"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fe64ed51-f4ef-4a30-e3d8-c36be794d2b1",
        "id": "Xe0obHwHeba4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting num2words\n",
            "  Downloading num2words-0.5.13-py3-none-any.whl (143 kB)\n",
            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/143.3 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━━\u001b[0m \u001b[32m133.1/143.3 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m143.3/143.3 kB\u001b[0m \u001b[31m3.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting docopt>=0.6.2 (from num2words)\n",
            "  Downloading docopt-0.6.2.tar.gz (25 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Building wheels for collected packages: docopt\n",
            "  Building wheel for docopt (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for docopt: filename=docopt-0.6.2-py2.py3-none-any.whl size=13706 sha256=a4c6cfe9bb3f53dc4d641486507d2c3d4b316daf3b5995704d5e8377872dd693\n",
            "  Stored in directory: /root/.cache/pip/wheels/fc/ab/d4/5da2067ac95b36618c629a5f93f809425700506f72c9732fac\n",
            "Successfully built docopt\n",
            "Installing collected packages: docopt, num2words\n",
            "Successfully installed docopt-0.6.2 num2words-0.5.13\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n",
            "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
            "[nltk_data]     /root/nltk_data...\n",
            "[nltk_data]   Unzipping taggers/averaged_perceptron_tagger.zip.\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/feature_extraction/text.py:544: UserWarning: The parameter 'ngram_range' will not be used since 'analyzer' is callable'\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "!pip install num2words\n",
        "import pandas as pd\n",
        "import re\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk.corpus import wordnet\n",
        "from nltk import pos_tag\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from num2words import num2words\n",
        "\n",
        "nltk.download('stopwords')\n",
        "nltk.download('wordnet')\n",
        "nltk.download('punkt')\n",
        "nltk.download('averaged_perceptron_tagger')\n",
        "\n",
        "def get_wordnet_pos(treebank_tag):\n",
        "    if treebank_tag.startswith('J'):\n",
        "        return wordnet.ADJ\n",
        "    elif treebank_tag.startswith('V'):\n",
        "        return wordnet.VERB\n",
        "    elif treebank_tag.startswith('N'):\n",
        "        return wordnet.NOUN\n",
        "    elif treebank_tag.startswith('R'):\n",
        "        return wordnet.ADV\n",
        "    else:\n",
        "        return wordnet.NOUN\n",
        "\n",
        "def preprocess_text(text):\n",
        "    # Convert to lowercase\n",
        "    text = text.lower()\n",
        "    # Remove punctuation\n",
        "    text = re.sub(r'[^\\w\\s]', '', text)\n",
        "    # Tokenization\n",
        "    words = word_tokenize(text)\n",
        "    # Convert numbers to their word equivalents\n",
        "    words = [num2words(i) if i.isdigit() else i for i in words]\n",
        "    # Remove stopwords and apply lemmatization\n",
        "    stop_words = set(stopwords.words('english'))\n",
        "    lemmatizer = WordNetLemmatizer()\n",
        "    words = [lemmatizer.lemmatize(word, get_wordnet_pos(pos)) for word, pos in pos_tag(words) if word not in stop_words]\n",
        "    return words\n",
        "\n",
        "def load_and_preprocess_data(filepath):\n",
        "    data = pd.read_csv(filepath)\n",
        "    data['processed_text'] = data['medical_abstract'].apply(preprocess_text)\n",
        "    return data\n",
        "\n",
        "data = load_and_preprocess_data('/content/drive/MyDrive/data.csv')\n",
        "\n",
        "# TF-IDF Transformation\n",
        "vectorizer = TfidfVectorizer(analyzer=lambda x: x, ngram_range=(2, 5))\n",
        "tfidf_matrix = vectorizer.fit_transform(data['processed_text'])\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lTEMGoGcBbYz",
        "outputId": "ef38711d-9727-4796-a601-a0f262be93e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YQpq64n0eba4"
      },
      "source": [
        "Splitting the Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "67Nmu7X0eba4"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "train_val, test_data = train_test_split(data, test_size=0.2, random_state=42)\n",
        "train_data, val_data = train_test_split(train_val, test_size=0.25, random_state=42)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "traNPx_Ieba4"
      },
      "source": [
        "Feature Engineering for Traditional Models:\n",
        "SVMs, logistic regression, etc.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VqHjsUzDeba4"
      },
      "outputs": [],
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "\n",
        "vectorizer = TfidfVectorizer(max_features=5000)\n",
        "X_train_tfidf = vectorizer.fit_transform(train_data['processed_text']).toarray()\n",
        "X_val_tfidf = vectorizer.transform(val_data['processed_text']).toarray()\n",
        "X_test_tfidf = vectorizer.transform(test_data['processed_text']).toarray()\n",
        "\n",
        "y_train = train_data['condition_label']\n",
        "y_val = val_data['condition_label']\n",
        "y_test = test_data['condition_label']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8qk0mRnveba5"
      },
      "source": [
        " Preparing for BERT and Other Transformers"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z2stJqvd_K-3",
        "outputId": "cd26d8d3-724d-4c4b-ef38-6d68b88ff073"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_token.py:88: UserWarning: \n",
            "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
            "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
            "You will be able to reuse this secret in all of your notebooks.\n",
            "Please note that authentication is recommended but still optional to access public models or datasets.\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "from transformers import BertTokenizer\n",
        "\n",
        "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
        "\n",
        "def tokenize_for_bert(data):\n",
        "    texts = data['processed_text'].tolist()\n",
        "    return tokenizer(texts, padding=\"max_length\", truncation=True, max_length=512, return_tensors=\"pt\")\n",
        "\n",
        "train_encodings = tokenize_for_bert(train_data)\n",
        "val_encodings = tokenize_for_bert(val_data)\n",
        "test_encodings = tokenize_for_bert(test_data)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZKwV_dSPeba5"
      },
      "source": [
        "*Model Training:*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kEIBaiEPeba5"
      },
      "outputs": [],
      "source": [
        "#SVM\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "# Define the model and parameter grid\n",
        "svc = SVC()\n",
        "param_grid_svc = {\n",
        "    'C': [0.1, 1, 10],\n",
        "    'kernel': ['linear', 'rbf'],\n",
        "    'gamma': ['scale', 'auto']\n",
        "}\n",
        "\n",
        "# Setup GridSearchCV\n",
        "grid_search_svc = GridSearchCV(svc, param_grid_svc, cv=5, scoring='accuracy')\n",
        "\n",
        "# Fit the model\n",
        "grid_search_svc.fit(X_train_tfidf, y_train)\n",
        "\n",
        "# Evaluate the model\n",
        "best_svc = grid_search_svc.best_estimator_\n",
        "print(f\"Best Parameters for SVM: {grid_search_svc.best_params_}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8B-tl3r2GkPR"
      },
      "source": [
        "### Decision Tree\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gnVtIWDQGrJG"
      },
      "source": [
        "Training a Decision Tree model using the default hyperparameters and evaluate its."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ru6PfGDGG8BR",
        "outputId": "d811ada2-0068-4537-a70e-9d3d3d83122f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy on Test Data: 0.4268349696119682\n",
            "Accuracy on Validation Data: 0.44340505144995324\n"
          ]
        }
      ],
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Initialize the Decision Tree model with default hyperparameters\n",
        "dt_classifier = DecisionTreeClassifier()\n",
        "\n",
        "# Train the Decision Tree model\n",
        "dt_classifier.fit(X_train_tfidf, y_train)\n",
        "\n",
        "# Predict on the test data\n",
        "y_test_pred = dt_classifier.predict(X_test_tfidf)\n",
        "# Predict on the validation data\n",
        "y_val_pred = dt_classifier.predict(X_val_tfidf)\n",
        "\n",
        "# Evaluate the model on the test data for accuracy\n",
        "test_accuracy = accuracy_score(y_test, y_test_pred)\n",
        "print(\"Accuracy on Test Data:\", test_accuracy)\n",
        "\n",
        "# Evaluate the model on the validation data for accuracy\n",
        "val_accuracy = accuracy_score(y_val, y_val_pred)\n",
        "print(\"Accuracy on Validation Data:\", val_accuracy)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CdmvHBe1JUsN"
      },
      "source": [
        "#### Hyperparameter tuning"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sQsrjM0iJVpL"
      },
      "source": [
        "Useing the GridSearchCV module of the sklearn library to tune the hyperparameter of the Decision Tree model on the validation set."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 383
        },
        "id": "H5Lsgf9YJtZh",
        "outputId": "bea0a6bb-5db8-4834-b6d7-5b805742a435"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 2736 candidates, totalling 13680 fits\n"
          ]
        },
        {
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-10-81880f14fb3c>\u001b[0m in \u001b[0;36m<cell line: 20>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;31m# Fit GridSearchCV\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m \u001b[0mgrid_search\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train_tfidf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0;31m# Best estimator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    872\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    873\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 874\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    875\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    876\u001b[0m             \u001b[0;31m# multimetric is determined here because in the case of a callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1386\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1387\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1388\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1389\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    819\u001b[0m                     )\n\u001b[1;32m    820\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 821\u001b[0;31m                 out = parallel(\n\u001b[0m\u001b[1;32m    822\u001b[0m                     delayed(_fit_and_score)(\n\u001b[1;32m    823\u001b[0m                         \u001b[0mclone\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbase_estimator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mdelayed_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         )\n\u001b[0;32m---> 63\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable_with_config\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1916\u001b[0m             \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_sequential_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1917\u001b[0m             \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1918\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0moutput\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturn_generator\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1919\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1920\u001b[0m         \u001b[0;31m# Let's create an ID that uniquely identifies the current call. If the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_get_sequential_output\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1845\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_dispatched_batches\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1846\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_dispatched_tasks\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1847\u001b[0;31m                 \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1848\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_completed_tasks\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1849\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_progress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    121\u001b[0m             \u001b[0mconfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconfig_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 123\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36m_fit_and_score\u001b[0;34m(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score, return_parameters, return_n_test_samples, return_times, return_estimator, split_progress, candidate_progress, error_score)\u001b[0m\n\u001b[1;32m    684\u001b[0m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    685\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 686\u001b[0;31m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    687\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    688\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input)\u001b[0m\n\u001b[1;32m    887\u001b[0m         \"\"\"\n\u001b[1;32m    888\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 889\u001b[0;31m         super().fit(\n\u001b[0m\u001b[1;32m    890\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    891\u001b[0m             \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input)\u001b[0m\n\u001b[1;32m    377\u001b[0m             )\n\u001b[1;32m    378\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 379\u001b[0;31m         \u001b[0mbuilder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuild\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    380\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    381\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_outputs_\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mis_classifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Initialize the Decision Tree model\n",
        "dt_classifier = DecisionTreeClassifier()\n",
        "\n",
        "# Set up the parameter grid to tune\n",
        "param_grid = {\n",
        "    'criterion': ['gini', 'entropy'],\n",
        "    'max_depth': range(1, 20),\n",
        "    'min_samples_split': range(2, 10),\n",
        "    'min_samples_leaf': range(1, 10)\n",
        "}\n",
        "\n",
        "# Initialize the GridSearchCV object\n",
        "grid_search = GridSearchCV(estimator=dt_classifier, param_grid=param_grid, scoring='accuracy', cv=5, verbose=1)\n",
        "\n",
        "# Fit GridSearchCV\n",
        "grid_search.fit(X_train_tfidf, y_train)\n",
        "\n",
        "# Best estimator\n",
        "best_dt = grid_search.best_estimator_\n",
        "\n",
        "# Predict on the validation data using the best found parameters\n",
        "y_val_pred = best_dt.predict(X_val_tfidf)\n",
        "\n",
        "# Evaluate the model on the validation data for accuracy\n",
        "val_accuracy = accuracy_score(y_val, y_val_pred)\n",
        "print(\"Best Parameters:\", grid_search.best_params_)\n",
        "print(\"Accuracy on Validation Data with Best Parameters:\", val_accuracy)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for class imbalance\n",
        "class_counts = train_data['condition_label'].value_counts()\n",
        "print(class_counts)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "--TSc2L2kzKI",
        "outputId": "ee23a301-0a47-437b-a43d-ab9fd547a153"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "condition_label\n",
            "5    2279\n",
            "1    1525\n",
            "4    1436\n",
            "3     949\n",
            "2     741\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x6McNGiD9bLg"
      },
      "source": [
        "**Neural Networks**\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#version 2\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Embedding, LSTM, Dense, Dropout, Bidirectional\n",
        "from keras.layers import Conv1D, GlobalMaxPooling1D\n",
        "from keras.optimizers import Adam\n",
        "from keras.callbacks import ModelCheckpoint\n",
        "from keras.preprocessing.text import Tokenizer\n",
        "from keras.preprocessing.sequence import pad_sequences\n",
        "from sklearn.utils import class_weight\n",
        "from keras.utils import to_categorical\n",
        "from sklearn.metrics import classification_report\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import gensim\n",
        "\n",
        "# Load Word2Vec model (make sure you've downloaded it first)\n",
        "word2vec = gensim.models.KeyedVectors.load_word2vec_format('/content/drive/MyDrive/GoogleNews-vectors-negative300.bin', binary=True)\n",
        "\n",
        "# Tokenize the text\n",
        "tokenizer = Tokenizer()\n",
        "tokenizer.fit_on_texts(train_data['processed_text'])\n",
        "vocab_size = len(tokenizer.word_index) + 1\n",
        "\n",
        "# Convert text to sequences\n",
        "train_sequences = tokenizer.texts_to_sequences(train_data['processed_text'])\n",
        "val_sequences = tokenizer.texts_to_sequences(val_data['processed_text'])\n",
        "\n",
        "# Pad sequences\n",
        "max_length = max([len(s) for s in train_data['processed_text']])\n",
        "train_sequences = pad_sequences(train_sequences, maxlen=max_length, padding='post')\n",
        "val_sequences = pad_sequences(val_sequences, maxlen=max_length, padding='post')\n",
        "\n",
        "# Create a weight matrix for words in training docs\n",
        "embedding_matrix = np.zeros((vocab_size, 300))\n",
        "for word, i in tokenizer.word_index.items():\n",
        "    if word in word2vec.key_to_index:  # Use .key_to_index instead of .vocab\n",
        "        embedding_matrix[i] = word2vec.get_vector(word)  # Use .get_vector(word) instead of .word_vec(word)\n",
        "\n",
        "\n",
        "# Create a copy of the labels and subtract 1 to make them 0-indexed\n",
        "train_labels = train_data['condition_label'].copy() - 1\n",
        "val_labels = val_data['condition_label'].copy() - 1\n",
        "\n",
        "# Convert labels to one-hot vectors\n",
        "num_classes = 5  # Set this to the actual number of classes\n",
        "train_labels = to_categorical(train_labels, num_classes=num_classes)\n",
        "val_labels = to_categorical(val_labels, num_classes=num_classes)\n",
        "\n",
        "# Define the model\n",
        "model = Sequential()\n",
        "model.add(Embedding(vocab_size, 300, weights=[embedding_matrix], input_length=max_length, trainable=False))\n",
        "model.add(Conv1D(128, 5, activation='relu'))\n",
        "model.add(GlobalMaxPooling1D())\n",
        "model.add(Dense(64, activation='relu'))\n",
        "model.add(Dense(32, activation='relu'))\n",
        "model.add(Dense(num_classes, activation='softmax'))\n",
        "\n",
        "from keras import metrics\n",
        "\n",
        "# Compile the model\n",
        "model.compile(optimizer=Adam(),\n",
        "              loss='categorical_crossentropy',\n",
        "              metrics=['accuracy',\n",
        "                       metrics.Precision(name='precision'),\n",
        "                       metrics.Recall(name='recall'),\n",
        "                       metrics.AUC(name='auc')])\n",
        "\n",
        "\n",
        "\n",
        "# Calculate class weights\n",
        "class_weights = class_weight.compute_sample_weight('balanced', train_data['condition_label'])\n",
        "\n",
        "# Convert class weights to dictionary\n",
        "class_weight_dict = dict(enumerate(class_weights))\n",
        "\n",
        "# Train the model with class weights\n",
        "checkpoint = ModelCheckpoint('best_model.h5', save_best_only=True, monitor='val_loss', mode='min')\n",
        "history = model.fit(train_sequences, train_labels, validation_data=(val_sequences, val_labels), epochs=10, callbacks=[checkpoint], class_weight=class_weight_dict)\n",
        "\n",
        "# Plot training & validation accuracy values\n",
        "plt.plot(history.history['accuracy'])\n",
        "plt.plot(history.history['val_accuracy'])\n",
        "plt.title('Model accuracy')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['Train', 'Validation'], loc='upper left')\n",
        "plt.show()\n",
        "\n",
        "# Plot training & validation loss values\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('Model loss')\n",
        "plt.ylabel('Loss')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['Train', 'Validation'], loc='upper left')\n",
        "plt.show()\n",
        "\n",
        "# Get predictions\n",
        "preds = model.predict(val_sequences)\n",
        "preds = np.argmax(preds, axis=1)  # Convert probabilities to class labels\n",
        "\n",
        "# Add 1 to get the original labels\n",
        "preds = preds + 1\n",
        "\n",
        "# Calculate metrics\n",
        "report = classification_report(np.argmax(val_labels, axis=1) + 1, preds)\n",
        "print(report)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "eG4hsUJPs17V",
        "outputId": "5875e98c-5274-4ee8-ee06-dfefebeb2450"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "217/217 [==============================] - 57s 252ms/step - loss: 1.0613 - accuracy: 0.5351 - precision: 0.6408 - recall: 0.3329 - auc: 0.8249 - val_loss: 0.9599 - val_accuracy: 0.6074 - val_precision: 0.6944 - val_recall: 0.4299 - val_auc: 0.8827\n",
            "Epoch 2/10\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n",
            "  saving_api.save_model(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "217/217 [==============================] - 46s 214ms/step - loss: 0.8031 - accuracy: 0.6355 - precision: 0.6873 - recall: 0.5323 - auc: 0.9010 - val_loss: 0.9360 - val_accuracy: 0.5983 - val_precision: 0.6457 - val_recall: 0.5113 - val_auc: 0.8862\n",
            "Epoch 3/10\n",
            "217/217 [==============================] - 53s 245ms/step - loss: 0.6641 - accuracy: 0.6974 - precision: 0.7336 - recall: 0.6398 - auc: 0.9304 - val_loss: 0.9858 - val_accuracy: 0.5944 - val_precision: 0.6180 - val_recall: 0.5147 - val_auc: 0.8783\n",
            "Epoch 4/10\n",
            "217/217 [==============================] - 51s 237ms/step - loss: 0.5657 - accuracy: 0.7455 - precision: 0.7712 - recall: 0.7043 - auc: 0.9488 - val_loss: 1.0712 - val_accuracy: 0.5537 - val_precision: 0.5688 - val_recall: 0.5082 - val_auc: 0.8656\n",
            "Epoch 5/10\n",
            "217/217 [==============================] - 48s 222ms/step - loss: 0.4745 - accuracy: 0.7941 - precision: 0.8078 - recall: 0.7677 - auc: 0.9632 - val_loss: 1.1681 - val_accuracy: 0.5667 - val_precision: 0.5842 - val_recall: 0.5273 - val_auc: 0.8632\n",
            "Epoch 6/10\n",
            "217/217 [==============================] - 47s 217ms/step - loss: 0.4326 - accuracy: 0.8127 - precision: 0.8230 - recall: 0.7957 - auc: 0.9693 - val_loss: 1.2410 - val_accuracy: 0.5251 - val_precision: 0.5361 - val_recall: 0.5052 - val_auc: 0.8525\n",
            "Epoch 7/10\n",
            "217/217 [==============================] - 50s 229ms/step - loss: 0.4036 - accuracy: 0.8250 - precision: 0.8339 - recall: 0.8111 - auc: 0.9727 - val_loss: 1.2679 - val_accuracy: 0.5623 - val_precision: 0.5756 - val_recall: 0.5320 - val_auc: 0.8585\n",
            "Epoch 8/10\n",
            "217/217 [==============================] - 47s 218ms/step - loss: 0.3617 - accuracy: 0.8339 - precision: 0.8410 - recall: 0.8244 - auc: 0.9787 - val_loss: 1.2646 - val_accuracy: 0.5498 - val_precision: 0.5606 - val_recall: 0.5307 - val_auc: 0.8620\n",
            "Epoch 9/10\n",
            "217/217 [==============================] - 48s 223ms/step - loss: 0.3461 - accuracy: 0.8395 - precision: 0.8451 - recall: 0.8336 - auc: 0.9805 - val_loss: 1.4340 - val_accuracy: 0.5281 - val_precision: 0.5307 - val_recall: 0.5156 - val_auc: 0.8463\n",
            "Epoch 10/10\n",
            "217/217 [==============================] - 52s 239ms/step - loss: 0.3334 - accuracy: 0.8395 - precision: 0.8468 - recall: 0.8343 - auc: 0.9821 - val_loss: 1.3123 - val_accuracy: 0.5424 - val_precision: 0.5524 - val_recall: 0.5177 - val_auc: 0.8537\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "73/73 [==============================] - 8s 102ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.65      0.77      0.71       526\n",
            "           2       0.45      0.49      0.47       230\n",
            "           3       0.44      0.49      0.47       296\n",
            "           4       0.59      0.76      0.66       485\n",
            "           5       0.46      0.29      0.35       773\n",
            "\n",
            "    accuracy                           0.54      2310\n",
            "   macro avg       0.52      0.56      0.53      2310\n",
            "weighted avg       0.53      0.54      0.52      2310\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#with dropout layers\n",
        "#version 2\n",
        "!pip install keras-preprocessing\n",
        "\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Embedding, LSTM, Dense, Dropout, Bidirectional\n",
        "from keras.layers import Conv1D, GlobalMaxPooling1D\n",
        "from keras.optimizers import Adam\n",
        "from keras.callbacks import ModelCheckpoint\n",
        "from keras.preprocessing.text import Tokenizer\n",
        "from keras.preprocessing.sequence import pad_sequences\n",
        "from sklearn.utils import class_weight\n",
        "from keras.utils import to_categorical\n",
        "from sklearn.metrics import classification_report\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import gensim\n",
        "\n",
        "# Load Word2Vec model (make sure you've downloaded it first)\n",
        "word2vec = gensim.models.KeyedVectors.load_word2vec_format('/content/drive/MyDrive/GoogleNews-vectors-negative300.bin', binary=True)\n",
        "\n",
        "# Tokenize the text\n",
        "tokenizer = Tokenizer()\n",
        "tokenizer.fit_on_texts(train_data['processed_text'])\n",
        "vocab_size = len(tokenizer.word_index) + 1\n",
        "\n",
        "# Convert text to sequences\n",
        "train_sequences = tokenizer.texts_to_sequences(train_data['processed_text'])\n",
        "val_sequences = tokenizer.texts_to_sequences(val_data['processed_text'])\n",
        "\n",
        "# Pad sequences\n",
        "max_length = max([len(s) for s in train_data['processed_text']])\n",
        "train_sequences = pad_sequences(train_sequences, maxlen=max_length, padding='post')\n",
        "val_sequences = pad_sequences(val_sequences, maxlen=max_length, padding='post')\n",
        "\n",
        "# Create a weight matrix for words in training docs\n",
        "embedding_matrix = np.zeros((vocab_size, 300))\n",
        "for word, i in tokenizer.word_index.items():\n",
        "    if word in word2vec.key_to_index:  # Use .key_to_index instead of .vocab\n",
        "        embedding_matrix[i] = word2vec.get_vector(word)  # Use .get_vector(word) instead of .word_vec(word)\n",
        "\n",
        "\n",
        "# Create a copy of the labels and subtract 1 to make them 0-indexed\n",
        "train_labels = train_data['condition_label'].copy() - 1\n",
        "val_labels = val_data['condition_label'].copy() - 1\n",
        "\n",
        "# Convert labels to one-hot vectors\n",
        "num_classes = 5  # Set this to the actual number of classes\n",
        "train_labels = to_categorical(train_labels, num_classes=num_classes)\n",
        "val_labels = to_categorical(val_labels, num_classes=num_classes)\n",
        "\n",
        "from keras.layers import Conv1D, GlobalMaxPooling1D\n",
        "\n",
        "# Define the model\n",
        "model = Sequential()\n",
        "model.add(Embedding(vocab_size, 300, weights=[embedding_matrix], input_length=max_length, trainable=False))\n",
        "model.add(Conv1D(128, 5, activation='sigmoid'))\n",
        "model.add(GlobalMaxPooling1D())\n",
        "model.add(Dense(64, activation='sigmoid'))\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Dense(32, activation='sigmoid'))\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Dense(num_classes, activation='softmax'))\n",
        "\n",
        "from keras import metrics\n",
        "\n",
        "# Compile the model\n",
        "model.compile(optimizer=Adam(),\n",
        "              loss='categorical_crossentropy',\n",
        "              metrics=['accuracy',\n",
        "                       metrics.Precision(name='precision'),\n",
        "                       metrics.Recall(name='recall'),\n",
        "                       metrics.AUC(name='auc')])\n",
        "\n",
        "\n",
        "\n",
        "# Calculate class weights\n",
        "class_weights = class_weight.compute_sample_weight('balanced', train_data['condition_label'])\n",
        "\n",
        "# Convert class weights to dictionary\n",
        "class_weight_dict = dict(enumerate(class_weights))\n",
        "\n",
        "# Train the model with class weights\n",
        "checkpoint = ModelCheckpoint('best_model.h5', save_best_only=True, monitor='val_loss', mode='min')\n",
        "history = model.fit(train_sequences, train_labels, validation_data=(val_sequences, val_labels), epochs=10, callbacks=[checkpoint], class_weight=class_weight_dict)\n",
        "\n",
        "# Plot training & validation accuracy values\n",
        "plt.plot(history.history['accuracy'])\n",
        "plt.plot(history.history['val_accuracy'])\n",
        "plt.title('Model accuracy')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['Train', 'Validation'], loc='upper left')\n",
        "plt.show()\n",
        "\n",
        "# Plot training & validation loss values\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('Model loss')\n",
        "plt.ylabel('Loss')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['Train', 'Validation'], loc='upper left')\n",
        "plt.show()\n",
        "\n",
        "# Get predictions\n",
        "preds = model.predict(val_sequences)\n",
        "preds = np.argmax(preds, axis=1)  # Convert probabilities to class labels\n",
        "\n",
        "# Add 1 to get the original labels\n",
        "preds = preds + 1\n",
        "\n",
        "# Calculate metrics\n",
        "report = classification_report(np.argmax(val_labels, axis=1) + 1, preds)\n",
        "print(report)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Pe6IZO_g-lTv",
        "outputId": "ec637d81-030f-4c0b-be66-3ee4169683dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting keras-preprocessing\n",
            "  Downloading Keras_Preprocessing-1.1.2-py2.py3-none-any.whl (42 kB)\n",
            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/42.6 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.6/42.6 kB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: numpy>=1.9.1 in /usr/local/lib/python3.10/dist-packages (from keras-preprocessing) (1.25.2)\n",
            "Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from keras-preprocessing) (1.16.0)\n",
            "Installing collected packages: keras-preprocessing\n",
            "Successfully installed keras-preprocessing-1.1.2\n",
            "Epoch 1/10\n",
            "217/217 [==============================] - ETA: 0s - loss: 1.5382 - accuracy: 0.2680 - precision: 0.2739 - recall: 0.0124 - auc: 0.6004"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n",
            "  saving_api.save_model(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r217/217 [==============================] - 55s 239ms/step - loss: 1.5382 - accuracy: 0.2680 - precision: 0.2739 - recall: 0.0124 - auc: 0.6004 - val_loss: 1.4883 - val_accuracy: 0.4100 - val_precision: 0.0000e+00 - val_recall: 0.0000e+00 - val_auc: 0.7018\n",
            "Epoch 2/10\n",
            "217/217 [==============================] - 55s 255ms/step - loss: 1.3449 - accuracy: 0.3880 - precision: 0.5782 - recall: 0.0736 - auc: 0.7044 - val_loss: 1.2235 - val_accuracy: 0.5502 - val_precision: 0.6810 - val_recall: 0.3290 - val_auc: 0.8084\n",
            "Epoch 3/10\n",
            "217/217 [==============================] - 49s 225ms/step - loss: 1.1717 - accuracy: 0.4909 - precision: 0.6166 - recall: 0.2309 - auc: 0.7795 - val_loss: 1.1399 - val_accuracy: 0.5636 - val_precision: 0.6707 - val_recall: 0.3580 - val_auc: 0.8304\n",
            "Epoch 4/10\n",
            "217/217 [==============================] - 53s 245ms/step - loss: 1.0975 - accuracy: 0.5260 - precision: 0.6390 - recall: 0.2902 - auc: 0.8080 - val_loss: 1.0999 - val_accuracy: 0.5727 - val_precision: 0.6856 - val_recall: 0.3494 - val_auc: 0.8441\n",
            "Epoch 5/10\n",
            "217/217 [==============================] - 47s 217ms/step - loss: 1.0502 - accuracy: 0.5522 - precision: 0.6512 - recall: 0.3263 - auc: 0.8254 - val_loss: 1.0777 - val_accuracy: 0.5740 - val_precision: 0.6829 - val_recall: 0.3571 - val_auc: 0.8497\n",
            "Epoch 6/10\n",
            "217/217 [==============================] - 49s 224ms/step - loss: 1.0049 - accuracy: 0.5661 - precision: 0.6629 - recall: 0.3535 - auc: 0.8387 - val_loss: 1.0561 - val_accuracy: 0.5740 - val_precision: 0.7022 - val_recall: 0.3450 - val_auc: 0.8564\n",
            "Epoch 7/10\n",
            "217/217 [==============================] - 50s 229ms/step - loss: 0.9771 - accuracy: 0.5789 - precision: 0.6744 - recall: 0.3739 - auc: 0.8475 - val_loss: 1.0588 - val_accuracy: 0.5766 - val_precision: 0.6774 - val_recall: 0.3745 - val_auc: 0.8562\n",
            "Epoch 8/10\n",
            "217/217 [==============================] - 49s 225ms/step - loss: 0.9443 - accuracy: 0.5890 - precision: 0.6682 - recall: 0.4007 - auc: 0.8573 - val_loss: 1.0516 - val_accuracy: 0.5727 - val_precision: 0.6791 - val_recall: 0.3848 - val_auc: 0.8573\n",
            "Epoch 9/10\n",
            "217/217 [==============================] - 49s 224ms/step - loss: 0.9070 - accuracy: 0.6020 - precision: 0.6848 - recall: 0.4120 - auc: 0.8670 - val_loss: 1.0553 - val_accuracy: 0.5758 - val_precision: 0.6233 - val_recall: 0.4835 - val_auc: 0.8590\n",
            "Epoch 10/10\n",
            "217/217 [==============================] - 47s 218ms/step - loss: 0.8901 - accuracy: 0.6013 - precision: 0.6832 - recall: 0.4267 - auc: 0.8716 - val_loss: 1.0677 - val_accuracy: 0.5719 - val_precision: 0.6306 - val_recall: 0.4775 - val_auc: 0.8566\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "73/73 [==============================] - 7s 92ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.73      0.81      0.77       526\n",
            "           2       0.00      0.00      0.00       230\n",
            "           3       0.00      0.00      0.00       296\n",
            "           4       0.63      0.84      0.72       485\n",
            "           5       0.45      0.63      0.53       773\n",
            "\n",
            "    accuracy                           0.57      2310\n",
            "   macro avg       0.36      0.46      0.40      2310\n",
            "weighted avg       0.45      0.57      0.50      2310\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.models import Sequential\n",
        "from keras.layers import Embedding, LSTM, Dense, Dropout, Bidirectional\n",
        "from keras.layers import Conv1D, GlobalMaxPooling1D\n",
        "from keras.optimizers import Adam\n",
        "from keras.callbacks import ModelCheckpoint\n",
        "from keras.preprocessing.text import Tokenizer\n",
        "from keras.preprocessing.sequence import pad_sequences\n",
        "from sklearn.utils import class_weight\n",
        "from keras.utils import to_categorical\n",
        "from sklearn.metrics import classification_report\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import itertools\n",
        "\n",
        "# Define the hyperparameters\n",
        "optimizers = ['SGD', 'RMSprop', 'Adagrad', 'Adadelta', 'Adam', 'Adamax', 'Nadam']\n",
        "dropouts = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5]\n",
        "neurons = [16, 32, 64, 128, 256]\n",
        "\n",
        "# Create a list of all possible combinations of hyperparameters\n",
        "param_combinations = list(itertools.product(optimizers, dropouts, neurons))\n",
        "\n",
        "best_accuracy = 0\n",
        "best_params = None\n",
        "\n",
        "# Iterate over all possible combinations\n",
        "for params in param_combinations:\n",
        "    optimizer, dropout, neuron = params\n",
        "\n",
        "    # Define the model\n",
        "    model = Sequential()\n",
        "    model.add(Embedding(vocab_size, 300, weights=[embedding_matrix], input_length=max_length, trainable=False))\n",
        "    model.add(Conv1D(128, 5, activation='sigmoid'))\n",
        "    model.add(GlobalMaxPooling1D())\n",
        "    model.add(Dense(neuron, activation='sigmoid'))\n",
        "    model.add(Dropout(dropout))\n",
        "    model.add(Dense(neuron, activation='sigmoid'))\n",
        "    model.add(Dropout(dropout))\n",
        "    model.add(Dense(num_classes, activation='softmax'))\n",
        "\n",
        "    # Compile the model\n",
        "    model.compile(optimizer=optimizer,\n",
        "                  loss='categorical_crossentropy',\n",
        "                  metrics=['accuracy'])\n",
        "\n",
        "    # Train the model\n",
        "    history = model.fit(train_sequences, train_labels, validation_data=(val_sequences, val_labels), epochs=10)\n",
        "\n",
        "    # Get the accuracy of the model on the validation data\n",
        "    accuracy = history.history['val_accuracy'][-1]\n",
        "\n",
        "    # If this model has a better accuracy than the current best, update the best accuracy and best parameters\n",
        "    if accuracy > best_accuracy:\n",
        "        best_accuracy = accuracy\n",
        "        best_params = params\n",
        "\n",
        "# Print the best parameters and the accuracy achieved with them\n",
        "print(f\"Best parameters: Optimizer - {best_params[0]}, Dropout - {best_params[1]}, Neurons - {best_params[2]}\")\n",
        "print(f\"Best validation accuracy: {best_accuracy}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wnVFvKJGG8ze",
        "outputId": "c6695a20-c83e-4dd5-f48e-b55f2e83df1d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "217/217 [==============================] - 54s 240ms/step - loss: 1.6050 - accuracy: 0.2745 - val_loss: 1.5299 - val_accuracy: 0.3346\n",
            "Epoch 2/10\n",
            "217/217 [==============================] - 48s 221ms/step - loss: 1.5375 - accuracy: 0.3289 - val_loss: 1.5254 - val_accuracy: 0.3346\n",
            "Epoch 3/10\n",
            "217/217 [==============================] - 50s 229ms/step - loss: 1.5367 - accuracy: 0.3289 - val_loss: 1.5247 - val_accuracy: 0.3346\n",
            "Epoch 4/10\n",
            "217/217 [==============================] - 46s 214ms/step - loss: 1.5368 - accuracy: 0.3289 - val_loss: 1.5248 - val_accuracy: 0.3346\n",
            "Epoch 5/10\n",
            "217/217 [==============================] - 46s 213ms/step - loss: 1.5369 - accuracy: 0.3289 - val_loss: 1.5248 - val_accuracy: 0.3346\n",
            "Epoch 6/10\n",
            "217/217 [==============================] - 51s 234ms/step - loss: 1.5368 - accuracy: 0.3289 - val_loss: 1.5245 - val_accuracy: 0.3346\n",
            "Epoch 7/10\n",
            "217/217 [==============================] - 47s 217ms/step - loss: 1.5366 - accuracy: 0.3289 - val_loss: 1.5248 - val_accuracy: 0.3346\n",
            "Epoch 8/10\n",
            "217/217 [==============================] - 45s 208ms/step - loss: 1.5368 - accuracy: 0.3289 - val_loss: 1.5249 - val_accuracy: 0.3346\n",
            "Epoch 9/10\n",
            "217/217 [==============================] - 46s 214ms/step - loss: 1.5369 - accuracy: 0.3289 - val_loss: 1.5246 - val_accuracy: 0.3346\n",
            "Epoch 10/10\n",
            "217/217 [==============================] - 49s 227ms/step - loss: 1.5368 - accuracy: 0.3289 - val_loss: 1.5245 - val_accuracy: 0.3346\n",
            "Epoch 1/10\n",
            "217/217 [==============================] - 48s 217ms/step - loss: 1.5774 - accuracy: 0.2996 - val_loss: 1.5259 - val_accuracy: 0.3346\n",
            "Epoch 2/10\n",
            "217/217 [==============================] - 45s 208ms/step - loss: 1.5369 - accuracy: 0.3289 - val_loss: 1.5249 - val_accuracy: 0.3346\n",
            "Epoch 3/10\n",
            "217/217 [==============================] - 47s 215ms/step - loss: 1.5369 - accuracy: 0.3289 - val_loss: 1.5258 - val_accuracy: 0.3346\n",
            "Epoch 4/10\n",
            "217/217 [==============================] - 45s 210ms/step - loss: 1.5372 - accuracy: 0.3289 - val_loss: 1.5249 - val_accuracy: 0.3346\n",
            "Epoch 5/10\n",
            "217/217 [==============================] - 46s 212ms/step - loss: 1.5372 - accuracy: 0.3289 - val_loss: 1.5247 - val_accuracy: 0.3346\n",
            "Epoch 6/10\n",
            "217/217 [==============================] - 47s 219ms/step - loss: 1.5371 - accuracy: 0.3289 - val_loss: 1.5242 - val_accuracy: 0.3346\n",
            "Epoch 7/10\n",
            "217/217 [==============================] - 46s 212ms/step - loss: 1.5367 - accuracy: 0.3289 - val_loss: 1.5247 - val_accuracy: 0.3346\n",
            "Epoch 8/10\n",
            "217/217 [==============================] - 50s 228ms/step - loss: 1.5372 - accuracy: 0.3289 - val_loss: 1.5245 - val_accuracy: 0.3346\n",
            "Epoch 9/10\n",
            "217/217 [==============================] - 45s 209ms/step - loss: 1.5370 - accuracy: 0.3289 - val_loss: 1.5245 - val_accuracy: 0.3346\n",
            "Epoch 10/10\n",
            "217/217 [==============================] - 47s 217ms/step - loss: 1.5368 - accuracy: 0.3289 - val_loss: 1.5252 - val_accuracy: 0.3346\n",
            "Epoch 1/10\n",
            "217/217 [==============================] - 51s 229ms/step - loss: 1.5688 - accuracy: 0.3108 - val_loss: 1.5257 - val_accuracy: 0.3346\n",
            "Epoch 2/10\n",
            "217/217 [==============================] - 47s 217ms/step - loss: 1.5381 - accuracy: 0.3289 - val_loss: 1.5266 - val_accuracy: 0.3346\n",
            "Epoch 3/10\n",
            "217/217 [==============================] - 48s 223ms/step - loss: 1.5382 - accuracy: 0.3289 - val_loss: 1.5246 - val_accuracy: 0.3346\n",
            "Epoch 4/10\n",
            "217/217 [==============================] - 46s 213ms/step - loss: 1.5376 - accuracy: 0.3289 - val_loss: 1.5246 - val_accuracy: 0.3346\n",
            "Epoch 5/10\n",
            "217/217 [==============================] - 48s 222ms/step - loss: 1.5379 - accuracy: 0.3289 - val_loss: 1.5247 - val_accuracy: 0.3346\n",
            "Epoch 6/10\n",
            "217/217 [==============================] - 54s 248ms/step - loss: 1.5377 - accuracy: 0.3289 - val_loss: 1.5253 - val_accuracy: 0.3346\n",
            "Epoch 7/10\n",
            "217/217 [==============================] - 46s 212ms/step - loss: 1.5379 - accuracy: 0.3289 - val_loss: 1.5246 - val_accuracy: 0.3346\n",
            "Epoch 8/10\n",
            "217/217 [==============================] - 52s 239ms/step - loss: 1.5374 - accuracy: 0.3289 - val_loss: 1.5258 - val_accuracy: 0.3346\n",
            "Epoch 9/10\n",
            "217/217 [==============================] - 47s 219ms/step - loss: 1.5376 - accuracy: 0.3289 - val_loss: 1.5268 - val_accuracy: 0.3346\n",
            "Epoch 10/10\n",
            "217/217 [==============================] - 54s 248ms/step - loss: 1.5379 - accuracy: 0.3289 - val_loss: 1.5256 - val_accuracy: 0.3346\n",
            "Epoch 1/10\n",
            "217/217 [==============================] - 49s 221ms/step - loss: 1.5457 - accuracy: 0.3238 - val_loss: 1.5285 - val_accuracy: 0.3346\n",
            "Epoch 2/10\n",
            "217/217 [==============================] - 48s 219ms/step - loss: 1.5391 - accuracy: 0.3289 - val_loss: 1.5260 - val_accuracy: 0.3346\n",
            "Epoch 3/10\n",
            "217/217 [==============================] - 47s 216ms/step - loss: 1.5392 - accuracy: 0.3289 - val_loss: 1.5264 - val_accuracy: 0.3346\n",
            "Epoch 4/10\n",
            "217/217 [==============================] - 49s 225ms/step - loss: 1.5392 - accuracy: 0.3289 - val_loss: 1.5267 - val_accuracy: 0.3346\n",
            "Epoch 5/10\n",
            "217/217 [==============================] - 54s 251ms/step - loss: 1.5391 - accuracy: 0.3289 - val_loss: 1.5263 - val_accuracy: 0.3346\n",
            "Epoch 6/10\n",
            "217/217 [==============================] - 49s 227ms/step - loss: 1.5383 - accuracy: 0.3289 - val_loss: 1.5298 - val_accuracy: 0.3346\n",
            "Epoch 7/10\n",
            "217/217 [==============================] - 52s 241ms/step - loss: 1.5391 - accuracy: 0.3289 - val_loss: 1.5280 - val_accuracy: 0.3346\n",
            "Epoch 8/10\n",
            "217/217 [==============================] - ETA: 0s - loss: 1.5383 - accuracy: 0.3289"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UStUD3NEeba7"
      },
      "outputs": [],
      "source": [
        "#version 1\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Embedding, LSTM, Dense\n",
        "from keras.optimizers import Adam\n",
        "from keras.callbacks import ModelCheckpoint\n",
        "from keras.preprocessing.text import Tokenizer\n",
        "from keras import metrics\n",
        "from keras.preprocessing.sequence import pad_sequences\n",
        "from keras.utils import to_categorical\n",
        "from sklearn.metrics import classification_report\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Convert labels to one-hot vectors\n",
        "num_classes = 5  # Set this to the actual number of classes\n",
        "train_labels = to_categorical(train_data['condition_label'] - 1, num_classes=num_classes)\n",
        "val_labels = to_categorical(val_data['condition_label'] - 1, num_classes=num_classes)\n",
        "\n",
        "\n",
        "# Tokenize the text\n",
        "tokenizer = Tokenizer()\n",
        "tokenizer.fit_on_texts(train_data['processed_text'])\n",
        "vocab_size = len(tokenizer.word_index) + 1\n",
        "\n",
        "# Convert text to sequences\n",
        "train_sequences = tokenizer.texts_to_sequences(train_data['processed_text'])\n",
        "val_sequences = tokenizer.texts_to_sequences(val_data['processed_text'])\n",
        "\n",
        "# Pad sequences\n",
        "max_length = max([len(s) for s in train_data['processed_text']])\n",
        "train_sequences = pad_sequences(train_sequences, maxlen=max_length, padding='post')\n",
        "val_sequences = pad_sequences(val_sequences, maxlen=max_length, padding='post')\n",
        "\n",
        "\n",
        "# Define the model\n",
        "model = Sequential()\n",
        "model.add(Embedding(vocab_size, 50, input_length=max_length))\n",
        "model.add(LSTM(100))\n",
        "model.add(Dense(5, activation='softmax'))  # Assuming 5 classes\n",
        "\n",
        "# Compile the model\n",
        "model.compile(optimizer=Adam(),\n",
        "              loss='categorical_crossentropy',\n",
        "              metrics=['accuracy',\n",
        "                       metrics.Precision(name='precision'),\n",
        "                       metrics.Recall(name='recall'),\n",
        "                       metrics.AUC(name='auc')])\n",
        "\n",
        "# Train the model\n",
        "checkpoint = ModelCheckpoint('best_model.h5', save_best_only=True, monitor='val_loss', mode='min')\n",
        "history = model.fit(train_sequences, train_labels, validation_data=(val_sequences, val_labels), epochs=10, callbacks=[checkpoint])\n",
        "\n",
        "# Plot training & validation accuracy values\n",
        "plt.plot(history.history['accuracy'])\n",
        "plt.plot(history.history['val_accuracy'])\n",
        "plt.title('Model accuracy')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['Train', 'Validation'], loc='upper left')\n",
        "plt.show()\n",
        "\n",
        "# Plot training & validation loss values\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('Model loss')\n",
        "plt.ylabel('Loss')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['Train', 'Validation'], loc='upper left')\n",
        "plt.show()\n",
        "\n",
        "# Get predictions\n",
        "preds = model.predict(val_sequences)\n",
        "preds = np.argmax(preds, axis=1)  # Convert probabilities to class labels\n",
        "\n",
        "# Calculate metrics\n",
        "report = classification_report(np.argmax(val_labels, axis=1), preds)\n",
        "print(report)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "X__7Z9gxeaE5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ***Logistic Regression:***"
      ],
      "metadata": {
        "id": "-M7-sjK4TO3b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import re\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "\n",
        "nltk.download('stopwords')\n",
        "nltk.download('wordnet')\n",
        "\n",
        "def preprocess_text(text):\n",
        "    # Convert to lowercase\n",
        "    text = text.lower()\n",
        "    # Remove punctuation\n",
        "    text = re.sub(r'[^\\w\\s]', '', text)\n",
        "    # Remove stopwords and apply lemmatization\n",
        "    stop_words = set(stopwords.words('english'))\n",
        "    lemmatizer = WordNetLemmatizer()\n",
        "    text = ' '.join([lemmatizer.lemmatize(word) for word in text.split() if word not in stop_words])\n",
        "    return text\n",
        "\n",
        "def load_and_preprocess_data(filepath):\n",
        "    data = pd.read_csv(filepath)\n",
        "    data['processed_text'] = data['medical_abstract'].apply(preprocess_text)\n",
        "    return data\n",
        "\n",
        "data = load_and_preprocess_data('data.csv')\n"
      ],
      "metadata": {
        "id": "qfJU9UpfZRUq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "train_val, test_data = train_test_split(data, test_size=0.2, random_state=42)\n",
        "train_data, val_data = train_test_split(train_val, test_size=0.25, random_state=42)"
      ],
      "metadata": {
        "id": "MtmxfdifZO0Q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "\n",
        "vectorizer = TfidfVectorizer(max_features=5000)\n",
        "X_train_tfidf = vectorizer.fit_transform(train_data['processed_text']).toarray()\n",
        "X_val_tfidf = vectorizer.transform(val_data['processed_text']).toarray()\n",
        "X_test_tfidf = vectorizer.transform(test_data['processed_text']).toarray()\n",
        "\n",
        "y_train = train_data['condition_label']\n",
        "y_val = val_data['condition_label']\n",
        "y_test = test_data['condition_label']"
      ],
      "metadata": {
        "id": "ZAFsFyHwZM4f"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import classification_report\n",
        "\n",
        "# Vectorize the text data using TF-IDF\n",
        "vectorizer = TfidfVectorizer()\n",
        "X_train = vectorizer.fit_transform(train_data['processed_text'])\n",
        "y_train = train_data['condition_label']\n",
        "\n",
        "# Initialize and train the logistic regression model\n",
        "log_reg_model = LogisticRegression(max_iter=1000)\n",
        "log_reg_model.fit(X_train, y_train)\n",
        "\n",
        "# Evaluate the model on the validation set\n",
        "X_val = vectorizer.transform(val_data['processed_text'])\n",
        "y_val = val_data['condition_label']\n",
        "y_val_pred = log_reg_model.predict(X_val)\n",
        "\n",
        "# Print classification report to evaluate the model performance\n",
        "print(\"Classification Report on Validation Set:\")\n",
        "print(classification_report(y_val, y_val_pred))\n",
        "\n",
        "# Optionally, you can also evaluate the model on the test set\n",
        "X_test = vectorizer.transform(test_data['processed_text'])\n",
        "y_test = test_data['condition_label']\n",
        "y_test_pred = log_reg_model.predict(X_test)\n",
        "\n",
        "# Print classification report on the test set\n",
        "print(\"Classification Report on Test Set:\")\n",
        "print(classification_report(y_test, y_test_pred))\n"
      ],
      "metadata": {
        "id": "zlssucqqJwYY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e3f5182e-9c0e-4ee6-a780-41f1f909fc88"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification Report on Validation Set:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.74      0.74      0.74       526\n",
            "           2       0.51      0.29      0.37       230\n",
            "           3       0.52      0.32      0.40       296\n",
            "           4       0.67      0.62      0.65       485\n",
            "           5       0.45      0.59      0.51       773\n",
            "\n",
            "    accuracy                           0.57      2310\n",
            "   macro avg       0.58      0.51      0.53      2310\n",
            "weighted avg       0.58      0.57      0.56      2310\n",
            "\n",
            "Classification Report on Test Set:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.69      0.73      0.71       479\n",
            "           2       0.54      0.36      0.43       224\n",
            "           3       0.49      0.36      0.42       295\n",
            "           4       0.68      0.64      0.66       520\n",
            "           5       0.48      0.58      0.52       792\n",
            "\n",
            "    accuracy                           0.57      2310\n",
            "   macro avg       0.58      0.53      0.55      2310\n",
            "weighted avg       0.58      0.57      0.57      2310\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Hyperparameter Tuning:"
      ],
      "metadata": {
        "id": "Gv518tWPX-J8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "# Define hyperparameter grid\n",
        "param_grid = {\n",
        "    'C': [0.001, 0.01, 0.1, 1, 10, 100],  # Regularization strength\n",
        "    'penalty': ['l1', 'l2'],               # Penalty type\n",
        "    'solver': ['liblinear', 'saga']        # Solver for optimization\n",
        "}\n",
        "\n",
        "# Initialize logistic regression model\n",
        "log_reg_model = LogisticRegression(max_iter=1000)\n",
        "\n",
        "# Initialize GridSearchCV with logistic regression model and hyperparameter grid\n",
        "grid_search = GridSearchCV(estimator=log_reg_model, param_grid=param_grid, cv=5, scoring='accuracy')\n",
        "\n",
        "# Perform grid search\n",
        "grid_search.fit(X_train, y_train)\n",
        "\n",
        "# Get the best hyperparameters\n",
        "best_params = grid_search.best_params_\n",
        "print(\"Best Hyperparameters:\", best_params)\n",
        "\n",
        "# Train final model with best hyperparameters on entire training set\n",
        "best_log_reg_model = LogisticRegression(**best_params, max_iter=1000)\n",
        "best_log_reg_model.fit(X_train, y_train)\n",
        "\n",
        "# Evaluate the final model on the validation set\n",
        "y_val_pred = best_log_reg_model.predict(X_val)\n",
        "print(\"Classification Report on Validation Set:\")\n",
        "print(classification_report(y_val, y_val_pred))\n"
      ],
      "metadata": {
        "id": "7jBR8rzLX9vT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ***Decision Trees***"
      ],
      "metadata": {
        "id": "DonswPUFc3As"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-Q7FpMZ_-0py"
      },
      "source": [
        "Preprocessing"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 383
        },
        "id": "tYdS2EU1-26j",
        "outputId": "a1c994c0-144e-4c4e-a1cc-733566312b1c"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to\n",
            "[nltk_data]     C:\\Users\\ziko1\\AppData\\Roaming\\nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n",
            "[nltk_data] Downloading package wordnet to\n",
            "[nltk_data]     C:\\Users\\ziko1\\AppData\\Roaming\\nltk_data...\n",
            "[nltk_data]   Package wordnet is already up-to-date!\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import re\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "\n",
        "nltk.download('stopwords')\n",
        "nltk.download('wordnet')\n",
        "\n",
        "def preprocess_text(text):\n",
        "    # Convert to lowercase\n",
        "    text = text.lower()\n",
        "    # Remove punctuation\n",
        "    text = re.sub(r'[^\\w\\s]', '', text)\n",
        "    # Remove stopwords and apply lemmatization\n",
        "    stop_words = set(stopwords.words('english'))\n",
        "    lemmatizer = WordNetLemmatizer()\n",
        "    text = ' '.join([lemmatizer.lemmatize(word) for word in text.split() if word not in stop_words])\n",
        "    return text\n",
        "\n",
        "def load_and_preprocess_data(filepath):\n",
        "    data = pd.read_csv(filepath)\n",
        "    data['processed_text'] = data['medical_abstract'].apply(preprocess_text)\n",
        "    return data\n",
        "\n",
        "data = load_and_preprocess_data('data.csv')\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fa_hmER3-4fB"
      },
      "source": [
        "Splitting the Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Pkww7pg5-8OK"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "train_val, test_data = train_test_split(data, test_size=0.2, random_state=42)\n",
        "train_data, val_data = train_test_split(train_val, test_size=0.25, random_state=42)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fZcpq_5x-_nh"
      },
      "source": [
        "Feature Engineering for Traditional Models:\n",
        "SVMs, logistic regression, etc.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NvLFiMXm-_VM"
      },
      "outputs": [],
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "\n",
        "vectorizer = TfidfVectorizer(max_features=5000)\n",
        "X_train_tfidf = vectorizer.fit_transform(train_data['processed_text']).toarray()\n",
        "X_val_tfidf = vectorizer.transform(val_data['processed_text']).toarray()\n",
        "X_test_tfidf = vectorizer.transform(test_data['processed_text']).toarray()\n",
        "\n",
        "y_train = train_data['condition_label']\n",
        "y_val = val_data['condition_label']\n",
        "y_test = test_data['condition_label']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PfjF6jx1_Gj7"
      },
      "source": [
        " Preparing for BERT and Other Transformers"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_8bvOb8mcn7O"
      },
      "source": [
        "Function to Plot Learning Curves:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jVkYWpJacn7O"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import learning_curve\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "\n",
        "\n",
        "def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n",
        "                        n_jobs=None, train_sizes=np.linspace(.1, 1.0, 5)):\n",
        "    plt.figure()\n",
        "    plt.title(title)\n",
        "    if ylim is not None:\n",
        "        plt.ylim(*ylim)\n",
        "    plt.xlabel(\"Training examples\")\n",
        "    plt.ylabel(\"Score\")\n",
        "    train_sizes, train_scores, test_scores = learning_curve(\n",
        "        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n",
        "    train_scores_mean = np.mean(train_scores, axis=1)\n",
        "    train_scores_std = np.std(train_scores, axis=1)\n",
        "    test_scores_mean = np.mean(test_scores, axis=1)\n",
        "    test_scores_std = np.std(test_scores, axis=1)\n",
        "\n",
        "    plt.grid()\n",
        "\n",
        "    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n",
        "                     train_scores_mean + train_scores_std, alpha=0.1,\n",
        "                     color=\"r\")\n",
        "    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n",
        "                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n",
        "    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n",
        "             label=\"Training score\")\n",
        "    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n",
        "             label=\"Cross-validation score\")\n",
        "\n",
        "    plt.legend(loc=\"best\")\n",
        "    return plt\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6nlueAC6_PlR"
      },
      "source": [
        "*Model Training:*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zulpwqQs_Qh4"
      },
      "outputs": [],
      "source": [
        "#SVM\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "# Define the model and parameter grid\n",
        "svc = SVC()\n",
        "param_grid_svc = {\n",
        "    'C': [0.1, 1, 10],\n",
        "    'kernel': ['linear', 'rbf'],\n",
        "    'gamma': ['scale', 'auto']\n",
        "}\n",
        "\n",
        "# Setup GridSearchCV\n",
        "grid_search_svc = GridSearchCV(svc, param_grid_svc, cv=5, scoring='accuracy')\n",
        "\n",
        "# Fit the model\n",
        "grid_search_svc.fit(X_train_tfidf, y_train)\n",
        "\n",
        "# Evaluate the model\n",
        "best_svc = grid_search_svc.best_estimator_\n",
        "print(f\"Best Parameters for SVM: {grid_search_svc.best_params_}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P_ZMjTkrc-qs"
      },
      "source": [
        "### Decision Tree\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KVCPc9ryc-qs"
      },
      "source": [
        "Training a Decision Tree model using the default hyperparameters and evaluate its."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d811ada2-0068-4537-a70e-9d3d3d83122f",
        "id": "kUd3OzkGc-qs"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy on Test Data: 0.45064935064935063\n",
            "Accuracy on Validation Data: 0.45670995670995673\n"
          ]
        }
      ],
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Initialize the Decision Tree model with default hyperparameters\n",
        "dt_classifier = DecisionTreeClassifier()\n",
        "\n",
        "# Train the Decision Tree model\n",
        "dt_classifier.fit(X_train_tfidf, y_train)\n",
        "\n",
        "# Predict on the test data\n",
        "y_test_pred = dt_classifier.predict(X_test_tfidf)\n",
        "# Predict on the validation data\n",
        "y_val_pred = dt_classifier.predict(X_val_tfidf)\n",
        "\n",
        "# Evaluate the model on the test data for accuracy\n",
        "test_accuracy = accuracy_score(y_test, y_test_pred)\n",
        "print(\"Accuracy on Test Data:\", test_accuracy)\n",
        "\n",
        "# Evaluate the model on the validation data for accuracy\n",
        "val_accuracy = accuracy_score(y_val, y_val_pred)\n",
        "print(\"Accuracy on Validation Data:\", val_accuracy)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bkwliyQ6cn7P",
        "outputId": "b3a76941-1a80-4288-f34d-3ab2db76e3e9"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "dt_classifier = DecisionTreeClassifier()\n",
        "plot_learning_curve(dt_classifier, \"Learning Curve (Decision Tree)\", X_train_tfidf, y_train, cv=5)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zPhqvlGGc-qs"
      },
      "source": [
        "#### Hyperparameter tuning"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bdATc5ICc-qt"
      },
      "source": [
        "Useing the GridSearchCV module of the sklearn library to tune the hyperparameter of the Decision Tree model on the validation set."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 383
        },
        "outputId": "bea0a6bb-5db8-4834-b6d7-5b805742a435",
        "id": "ZPN84wd3c-qt"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 2736 candidates, totalling 13680 fits\n",
            "Best Parameters: {'criterion': 'gini', 'max_depth': 17, 'min_samples_leaf': 9, 'min_samples_split': 8}\n",
            "Accuracy on Validation Data with Best Parameters: 0.5307359307359307\n"
          ]
        }
      ],
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Initialize the Decision Tree model\n",
        "dt_classifier = DecisionTreeClassifier()\n",
        "\n",
        "# Set up the parameter grid to tune\n",
        "param_grid = {\n",
        "    'criterion': ['gini', 'entropy'],\n",
        "    'max_depth': range(1, 20),\n",
        "    'min_samples_split': range(2, 10),\n",
        "    'min_samples_leaf': range(1, 10)\n",
        "}\n",
        "\n",
        "# Initialize the GridSearchCV object\n",
        "grid_search = GridSearchCV(estimator=dt_classifier, param_grid=param_grid, scoring='accuracy', cv=5, verbose=1)\n",
        "\n",
        "# Fit GridSearchCV\n",
        "grid_search.fit(X_train_tfidf, y_train)\n",
        "\n",
        "# Best estimator\n",
        "best_dt = grid_search.best_estimator_\n",
        "\n",
        "# Predict on the validation data using the best found parameters\n",
        "y_val_pred = best_dt.predict(X_val_tfidf)\n",
        "\n",
        "# Evaluate the model on the validation data for accuracy\n",
        "val_accuracy = accuracy_score(y_val, y_val_pred)\n",
        "print(\"Best Parameters:\", grid_search.best_params_)\n",
        "print(\"Accuracy on Validation Data with Best Parameters:\", val_accuracy)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tOLJxs_Ycn7Q",
        "outputId": "7a104f75-8d5e-4682-f297-71af62696dcc"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "dt_classifier = DecisionTreeClassifier(criterion='entropy', max_depth=19, min_samples_leaf=1, min_samples_split=2)\n",
        "plot_learning_curve(dt_classifier, \"Learning Curve (Decision Tree with Best Parameters)\", X_train_tfidf, y_train, cv=5)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "outputId": "d0b8d51b-355e-4cc0-8e6b-782c35fd9da8",
        "id": "_BQLeuvac-qt"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy on Validation Data: 0.5722943722943723\n"
          ]
        }
      ],
      "source": [
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Initialize the Gradient Boosting Classifier with default hyperparameters\n",
        "gb_classifier = GradientBoostingClassifier()\n",
        "\n",
        "# Train the Gradient Boosting model\n",
        "gb_classifier.fit(X_train_tfidf, y_train)\n",
        "\n",
        "# Predict on the validation data\n",
        "y_val_pred = gb_classifier.predict(X_val_tfidf)\n",
        "\n",
        "# Evaluate the model on the validation data for accuracy\n",
        "val_accuracy = accuracy_score(y_val, y_val_pred)\n",
        "print(\"Accuracy on Validation Data:\", val_accuracy)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "u4QAGiEucn7Q"
      },
      "outputs": [],
      "source": [
        "gb_classifier = GradientBoostingClassifier()\n",
        "plot_learning_curve(gb_classifier, \"Learning Curve (Gradient Boosting)\", X_train_tfidf, y_train, cv=5)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lNlo1Hv3cn7Q",
        "outputId": "efff4841-17a5-45a1-a79f-c444846e97db"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 243 candidates, totalling 1215 fits\n"
          ]
        }
      ],
      "source": [
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Initialize the Gradient Boosting Classifier\n",
        "gb_classifier = GradientBoostingClassifier()\n",
        "\n",
        "# Set up the parameter grid to tune\n",
        "param_grid = {\n",
        "    'n_estimators': [100, 200, 300],\n",
        "    'learning_rate': [0.01, 0.1, 0.2],\n",
        "    'max_depth': [3, 5, 7],\n",
        "    'min_samples_split': [2, 4, 6],\n",
        "    'min_samples_leaf': [1, 2, 3]\n",
        "}\n",
        "\n",
        "# Initialize the GridSearchCV object\n",
        "grid_search = GridSearchCV(estimator=gb_classifier, param_grid=param_grid, scoring='accuracy', cv=5, verbose=1)\n",
        "\n",
        "# Fit GridSearchCV\n",
        "grid_search.fit(X_train_tfidf, y_train)\n",
        "\n",
        "# Best estimator\n",
        "\n",
        "best_gb = grid_search.best_estimator_\n",
        "\n",
        "# Predict on the validation data using the best found parameters\n",
        "y_val_pred = best_gb.predict(X_val_tfidf)\n",
        "\n",
        "# Evaluate the model on the validation data for accuracy\n",
        "val_accuracy = accuracy_score(y_val, y_val_pred)\n",
        "print(\"Best Parameters:\", grid_search.best_params_)\n",
        "print(\"Accuracy on Validation Data with Best Parameters:\", val_accuracy)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ***CNN Overfitting***"
      ],
      "metadata": {
        "id": "ZJQVeYheXz4z"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "059999e4-e93f-42f0-b36c-f6e465381162",
        "outputId": "22fc1529-927f-4123-cb09-4e484c26ec9a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/5\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Embedding, Conv1D, MaxPooling1D, GlobalMaxPooling1D, Dense\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.utils.class_weight import compute_class_weight\n",
        "\n",
        "# Load data\n",
        "data = pd.read_csv('data.csv')\n",
        "\n",
        "# Encode labels\n",
        "label_encoder = LabelEncoder()\n",
        "y_encoded = label_encoder.fit_transform(data['condition_label'])\n",
        "y_categorical = to_categorical(y_encoded)\n",
        "\n",
        "# Prepare text data\n",
        "tokenizer = Tokenizer(num_words=5000)\n",
        "tokenizer.fit_on_texts(data['medical_abstract'])\n",
        "X_seq = tokenizer.texts_to_sequences(data['medical_abstract'])\n",
        "X_pad = pad_sequences(X_seq, maxlen=200)  # Considered the 75th percentile of sequence length\n",
        "\n",
        "# Split data\n",
        "X_train_val, X_test, y_train_val, y_test = train_test_split(X_pad, y_categorical, test_size=0.2, random_state=42)\n",
        "X_train, X_validate, y_train, y_validate = train_test_split(X_train_val, y_train_val, test_size=0.25, random_state=42)\n",
        "\n",
        "# Compute class weights\n",
        "class_weights = compute_class_weight('balanced', classes=np.unique(y_encoded), y=y_encoded)\n",
        "class_weight_dict = dict(enumerate(class_weights))\n",
        "\n",
        "# Build the CNN model\n",
        "model = Sequential([\n",
        "    Embedding(input_dim=5000, output_dim=50, input_length=200),\n",
        "    Conv1D(filters=64, kernel_size=5, activation='relu'),\n",
        "    MaxPooling1D(pool_size=4),\n",
        "    GlobalMaxPooling1D(),\n",
        "    Dense(64, activation='relu'),\n",
        "    Dense(y_categorical.shape[1], activation='softmax')\n",
        "])\n",
        "\n",
        "# Compile the model\n",
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Train the model\n",
        "model.fit(X_train, y_train, epochs=5, batch_size=64, validation_data=(X_validate, y_validate), class_weight=class_weight_dict)\n",
        "\n",
        "# Evaluate the model on the validation set\n",
        "val_loss, val_accuracy = model.evaluate(X_validate, y_validate)\n",
        "print(f'Validation Loss: {val_loss}')\n",
        "print(f'Validation Accuracy: {val_accuracy}')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "32e0076a-ce64-44e3-8f52-1f4875e6a03e",
        "outputId": "b1d8d064-e48f-45c1-b2c8-ee917c67ad28"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "253/253 [==============================] - 18s 25ms/step - loss: 1.5069 - accuracy: 0.2857 - val_loss: 1.2052 - val_accuracy: 0.4809\n",
            "Epoch 2/10\n",
            "253/253 [==============================] - 5s 18ms/step - loss: 0.9769 - accuracy: 0.5704 - val_loss: 1.0732 - val_accuracy: 0.5647\n",
            "Epoch 3/10\n",
            "253/253 [==============================] - 4s 17ms/step - loss: 0.7100 - accuracy: 0.6767 - val_loss: 1.2336 - val_accuracy: 0.5439\n",
            "Epoch 4/10\n",
            "253/253 [==============================] - 4s 17ms/step - loss: 0.5657 - accuracy: 0.7547 - val_loss: 1.2868 - val_accuracy: 0.5167\n",
            "Epoch 5/10\n",
            "253/253 [==============================] - 5s 18ms/step - loss: 0.4692 - accuracy: 0.7925 - val_loss: 1.4177 - val_accuracy: 0.5006\n",
            "Epoch 6/10\n",
            "253/253 [==============================] - 5s 19ms/step - loss: 0.4076 - accuracy: 0.8162 - val_loss: 1.5332 - val_accuracy: 0.4838\n",
            "Epoch 7/10\n",
            "253/253 [==============================] - 5s 18ms/step - loss: 0.3705 - accuracy: 0.8306 - val_loss: 1.5747 - val_accuracy: 0.4775\n",
            "Epoch 8/10\n",
            "253/253 [==============================] - 5s 18ms/step - loss: 0.3347 - accuracy: 0.8380 - val_loss: 1.6757 - val_accuracy: 0.4827\n",
            "Epoch 9/10\n",
            "253/253 [==============================] - 5s 18ms/step - loss: 0.3072 - accuracy: 0.8435 - val_loss: 1.9238 - val_accuracy: 0.4521\n",
            "Epoch 10/10\n",
            "253/253 [==============================] - 4s 16ms/step - loss: 0.2942 - accuracy: 0.8465 - val_loss: 1.8752 - val_accuracy: 0.4752\n",
            "55/55 [==============================] - 0s 5ms/step - loss: 1.8752 - accuracy: 0.4752\n",
            "Validation Accuracy: 0.4751732051372528, Validation Loss: 1.8751633167266846\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Embedding, Conv1D, MaxPooling1D, GlobalMaxPooling1D, Dense\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "from sklearn.utils.class_weight import compute_class_weight\n",
        "\n",
        "# Load your dataset\n",
        "data = pd.read_csv('data.csv')\n",
        "\n",
        "# Initialize and fit the tokenizer\n",
        "tokenizer = Tokenizer(num_words=35706)  # Set your vocabulary size\n",
        "tokenizer.fit_on_texts(data['medical_abstract'])\n",
        "sequences = tokenizer.texts_to_sequences(data['medical_abstract'])\n",
        "\n",
        "# Padding sequences\n",
        "max_length = 178  # Use your dataset's mean sequence length\n",
        "sequences_padded = pad_sequences(sequences, maxlen=max_length, padding='post')\n",
        "\n",
        "# Adjust class labels to start from 0 instead of 1\n",
        "data['condition_label'] -= 1\n",
        "\n",
        "# Class weights for handling imbalance\n",
        "class_weights = compute_class_weight('balanced', classes=np.unique(data['condition_label']), y=data['condition_label'])\n",
        "class_weight_dict = dict(enumerate(class_weights))\n",
        "\n",
        "# Splitting the dataset into train, validation, and test sets\n",
        "X_train, X_temp, y_train, y_temp = train_test_split(sequences_padded, data['condition_label'], test_size=0.3, random_state=42)\n",
        "X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)\n",
        "\n",
        "# Converting labels to one-hot encoding\n",
        "y_train = to_categorical(y_train, num_classes=5)\n",
        "y_val = to_categorical(y_val, num_classes=5)\n",
        "y_test = to_categorical(y_test, num_classes=5)\n",
        "\n",
        "# Building the CNN model\n",
        "model = Sequential([\n",
        "    Embedding(input_dim=35706, output_dim=100, input_length=max_length),\n",
        "    Conv1D(filters=128, kernel_size=5, activation='relu'),\n",
        "    MaxPooling1D(pool_size=2),\n",
        "    Conv1D(filters=64, kernel_size=5, activation='relu'),\n",
        "    GlobalMaxPooling1D(),\n",
        "    Dense(64, activation='relu'),\n",
        "    Dense(5, activation='softmax')\n",
        "])\n",
        "\n",
        "# Compiling the model\n",
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Training the model\n",
        "model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_val, y_val), class_weight=class_weight_dict)\n",
        "\n",
        "# Evaluate the model on the validation set\n",
        "val_loss, val_acc = model.evaluate(X_val, y_val)\n",
        "print(f'Validation Accuracy: {val_acc}, Validation Loss: {val_loss}')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7fbf5ae7-55e0-4173-8880-ab74a58dea03",
        "outputId": "9aa1af4b-ece5-4db3-f4ec-c0267a6f9e49"
      },
      "outputs": [
        {
          "ename": "KeyError",
          "evalue": "'accuracy'",
          "output_type": "error",
          "traceback": [
            "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "Cell \u001b[1;32mIn[7], line 8\u001b[0m\n\u001b[0;32m      6\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m12\u001b[39m, \u001b[38;5;241m5\u001b[39m))\n\u001b[0;32m      7\u001b[0m plt\u001b[38;5;241m.\u001b[39msubplot(\u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m2\u001b[39m, \u001b[38;5;241m1\u001b[39m)\n\u001b[1;32m----> 8\u001b[0m plt\u001b[38;5;241m.\u001b[39mplot(\u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mhistory\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mhistory\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43maccuracy\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m)\n\u001b[0;32m      9\u001b[0m plt\u001b[38;5;241m.\u001b[39mplot(model\u001b[38;5;241m.\u001b[39mhistory\u001b[38;5;241m.\u001b[39mhistory[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mval_accuracy\u001b[39m\u001b[38;5;124m'\u001b[39m])\n\u001b[0;32m     10\u001b[0m plt\u001b[38;5;241m.\u001b[39mtitle(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mModel Accuracy\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
            "\u001b[1;31mKeyError\u001b[0m: 'accuracy'"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1200x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "import seaborn as sns\n",
        "\n",
        "# Plotting training & validation accuracy values\n",
        "plt.figure(figsize=(12, 5))\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(model.history.history['accuracy'])\n",
        "plt.plot(model.history.history['val_accuracy'])\n",
        "plt.title('Model Accuracy')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['Train', 'Val'], loc='upper left')\n",
        "\n",
        "# Plotting training & validation loss values\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(model.history.history['loss'])\n",
        "plt.plot(model.history.history['val_loss'])\n",
        "plt.title('Model Loss')\n",
        "plt.ylabel('Loss')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['Train', 'Val'], loc='upper left')\n",
        "\n",
        "plt.show()\n",
        "\n",
        "# Predicting the validation set results\n",
        "y_val_pred = model.predict(X_val)\n",
        "y_val_pred_classes = np.argmax(y_val_pred, axis=1)\n",
        "y_val_true = np.argmax(y_val, axis=1)\n",
        "\n",
        "# Generating the confusion matrix\n",
        "cm = confusion_matrix(y_val_true, y_val_pred_classes)\n",
        "plt.figure(figsize=(10, 7))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.ylabel('True Label')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.show()\n",
        "\n",
        "# Generating classification report\n",
        "print(classification_report(y_val_true, y_val_pred_classes))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3064386d-4d4f-443f-b2fe-2fd422542ab2",
        "outputId": "dbb0aa7f-5f6c-4b06-9991-c7a070bcbc6e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "dict_keys([])\n"
          ]
        }
      ],
      "source": [
        "print(model.history.history.keys())\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8e6bf206-dece-41ca-8ea9-bce45f98a5f3",
        "outputId": "7b815ca1-82ea-4dd3-f586-02bb18e084fb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "253/253 [==============================] - 7s 19ms/step - loss: 1.4506 - accuracy: 0.3469 - val_loss: 1.2651 - val_accuracy: 0.4273\n",
            "Epoch 2/10\n",
            "253/253 [==============================] - 5s 18ms/step - loss: 1.0224 - accuracy: 0.5401 - val_loss: 1.0909 - val_accuracy: 0.5393\n",
            "Epoch 3/10\n",
            "253/253 [==============================] - 4s 17ms/step - loss: 0.7413 - accuracy: 0.6615 - val_loss: 1.2393 - val_accuracy: 0.5162\n",
            "Epoch 4/10\n",
            "253/253 [==============================] - 4s 17ms/step - loss: 0.5867 - accuracy: 0.7401 - val_loss: 1.2743 - val_accuracy: 0.5139\n",
            "Epoch 5/10\n",
            "253/253 [==============================] - 4s 17ms/step - loss: 0.4873 - accuracy: 0.7857 - val_loss: 1.4243 - val_accuracy: 0.5219\n",
            "Epoch 6/10\n",
            "253/253 [==============================] - 4s 17ms/step - loss: 0.4152 - accuracy: 0.8136 - val_loss: 1.5158 - val_accuracy: 0.4965\n",
            "Epoch 7/10\n",
            "253/253 [==============================] - 5s 18ms/step - loss: 0.3644 - accuracy: 0.8221 - val_loss: 1.5759 - val_accuracy: 0.4919\n",
            "Epoch 8/10\n",
            "253/253 [==============================] - 4s 17ms/step - loss: 0.3320 - accuracy: 0.8354 - val_loss: 1.6915 - val_accuracy: 0.4769\n",
            "Epoch 9/10\n",
            "253/253 [==============================] - 4s 17ms/step - loss: 0.3139 - accuracy: 0.8396 - val_loss: 1.7922 - val_accuracy: 0.4833\n",
            "Epoch 10/10\n",
            "253/253 [==============================] - 4s 16ms/step - loss: 0.2952 - accuracy: 0.8438 - val_loss: 1.8446 - val_accuracy: 0.4873\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1200x500 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "55/55 [==============================] - 0s 6ms/step - loss: 1.8446 - accuracy: 0.4873\n",
            "Validation Accuracy: 0.487297922372818, Validation Loss: 1.8446426391601562\n",
            "55/55 [==============================] - 1s 6ms/step\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1000x700 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.62      0.65      0.63       372\n",
            "           1       0.39      0.55      0.45       182\n",
            "           2       0.38      0.46      0.42       241\n",
            "           3       0.61      0.68      0.64       379\n",
            "           4       0.36      0.25      0.29       558\n",
            "\n",
            "    accuracy                           0.49      1732\n",
            "   macro avg       0.47      0.52      0.49      1732\n",
            "weighted avg       0.48      0.49      0.48      1732\n",
            "\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Embedding, Conv1D, MaxPooling1D, GlobalMaxPooling1D, Dense\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "from sklearn.utils.class_weight import compute_class_weight\n",
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "\n",
        "# Load your dataset\n",
        "data = pd.read_csv('data.csv')\n",
        "\n",
        "# Initialize and fit the tokenizer\n",
        "tokenizer = Tokenizer(num_words=35706)  # Set your vocabulary size\n",
        "tokenizer.fit_on_texts(data['medical_abstract'])\n",
        "sequences = tokenizer.texts_to_sequences(data['medical_abstract'])\n",
        "\n",
        "# Padding sequences\n",
        "max_length = 178  # Use your dataset's mean sequence length\n",
        "sequences_padded = pad_sequences(sequences, maxlen=max_length, padding='post')\n",
        "\n",
        "# Adjust class labels to start from 0 instead of 1\n",
        "data['condition_label'] -= 1\n",
        "\n",
        "# Class weights for handling imbalance\n",
        "class_weights = compute_class_weight('balanced', classes=np.unique(data['condition_label']), y=data['condition_label'])\n",
        "class_weight_dict = dict(enumerate(class_weights))\n",
        "\n",
        "# Splitting the dataset into train, validation, and test sets\n",
        "X_train, X_temp, y_train, y_temp = train_test_split(sequences_padded, data['condition_label'], test_size=0.3, random_state=42)\n",
        "X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)\n",
        "\n",
        "# Converting labels to one-hot encoding\n",
        "y_train = to_categorical(y_train, num_classes=5)\n",
        "y_val = to_categorical(y_val, num_classes=5)\n",
        "y_test = to_categorical(y_test, num_classes=5)\n",
        "\n",
        "# Building the CNN model\n",
        "model = Sequential([\n",
        "    Embedding(input_dim=35706, output_dim=100, input_length=max_length),\n",
        "    Conv1D(filters=128, kernel_size=5, activation='relu'),\n",
        "    MaxPooling1D(pool_size=2),\n",
        "    Conv1D(filters=64, kernel_size=5, activation='relu'),\n",
        "    GlobalMaxPooling1D(),\n",
        "    Dense(64, activation='relu'),\n",
        "    Dense(5, activation='softmax')\n",
        "])\n",
        "\n",
        "# Compiling the model\n",
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Training the model and capturing the history\n",
        "history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_val, y_val), class_weight=class_weight_dict, verbose=1)\n",
        "\n",
        "# Plotting training & validation accuracy and loss\n",
        "plt.figure(figsize=(12, 5))\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(history.history['accuracy'])\n",
        "plt.plot(history.history['val_accuracy'])\n",
        "plt.title('Model Accuracy')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['Train', 'Validation'], loc='upper left')\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('Model Loss')\n",
        "plt.ylabel('Loss')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['Train', 'Validation'], loc='upper left')\n",
        "plt.show()\n",
        "\n",
        "# Evaluate model performance on the validation set\n",
        "val_loss, val_acc = model.evaluate(X_val, y_val)\n",
        "print(f'Validation Accuracy: {val_acc}, Validation Loss: {val_loss}')\n",
        "\n",
        "# Confusion Matrix and Classification Report\n",
        "y_val_pred = model.predict(X_val)\n",
        "y_val_pred_classes = np.argmax(y_val_pred, axis=1)\n",
        "y_val_true = np.argmax(y_val, axis=1)\n",
        "\n",
        "cm = confusion_matrix(y_val_true, y_val_pred_classes)\n",
        "plt.figure(figsize=(10, 7))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.ylabel('True Label')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.show()\n",
        "\n",
        "print(classification_report(y_val_true, y_val_pred_classes))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "32f6a00e-186a-4dd4-8b25-75418eaa8862",
        "outputId": "240a9cbe-10a6-4325-8034-1ab8356eab4d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "253/253 [==============================] - 7s 20ms/step - loss: 1.6149 - accuracy: 0.1974 - val_loss: 1.6010 - val_accuracy: 0.2194\n",
            "Epoch 2/10\n",
            "253/253 [==============================] - 4s 17ms/step - loss: 1.4590 - accuracy: 0.3520 - val_loss: 1.3392 - val_accuracy: 0.5283\n",
            "Epoch 3/10\n",
            "253/253 [==============================] - 4s 18ms/step - loss: 1.1082 - accuracy: 0.5191 - val_loss: 1.1951 - val_accuracy: 0.5231\n",
            "Epoch 4/10\n",
            "253/253 [==============================] - 4s 17ms/step - loss: 0.8629 - accuracy: 0.5899 - val_loss: 1.1356 - val_accuracy: 0.5242\n",
            "Epoch 5/10\n",
            "253/253 [==============================] - 5s 19ms/step - loss: 0.7653 - accuracy: 0.6302 - val_loss: 1.1293 - val_accuracy: 0.5456\n",
            "Epoch 6/10\n",
            "253/253 [==============================] - 5s 19ms/step - loss: 0.6971 - accuracy: 0.6651 - val_loss: 1.1309 - val_accuracy: 0.5312\n",
            "Epoch 7/10\n",
            "253/253 [==============================] - 4s 17ms/step - loss: 0.6372 - accuracy: 0.6942 - val_loss: 1.1273 - val_accuracy: 0.5173\n",
            "Epoch 8/10\n",
            "253/253 [==============================] - 4s 16ms/step - loss: 0.5888 - accuracy: 0.7281 - val_loss: 1.1919 - val_accuracy: 0.4711\n",
            "Epoch 9/10\n",
            "253/253 [==============================] - 4s 15ms/step - loss: 0.5362 - accuracy: 0.7511 - val_loss: 1.1982 - val_accuracy: 0.4786\n",
            "Epoch 10/10\n",
            "251/253 [============================>.] - ETA: 0s - loss: 0.4969 - accuracy: 0.7658Restoring model weights from the end of the best epoch: 7.\n",
            "253/253 [==============================] - 4s 16ms/step - loss: 0.4963 - accuracy: 0.7656 - val_loss: 1.1942 - val_accuracy: 0.4746\n",
            "Epoch 10: early stopping\n"
          ]
        }
      ],
      "source": [
        "from tensorflow.keras.layers import Dropout\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "\n",
        "# Building the modified CNN model\n",
        "model = Sequential([\n",
        "    Embedding(input_dim=35706, output_dim=100, input_length=max_length),\n",
        "    Conv1D(filters=128, kernel_size=5, activation='relu'),\n",
        "    Dropout(0.5),  # Dropout layer after convolution\n",
        "    MaxPooling1D(pool_size=2),\n",
        "    Conv1D(filters=64, kernel_size=5, activation='relu'),\n",
        "    Dropout(0.5),  # Another Dropout layer\n",
        "    GlobalMaxPooling1D(),\n",
        "    Dense(64, activation='relu'),\n",
        "    Dropout(0.5),  # Dropout before the output layer\n",
        "    Dense(5, activation='softmax')\n",
        "])\n",
        "\n",
        "# Compiling the model\n",
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Early stopping setup\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=3, verbose=1, mode='min', restore_best_weights=True)\n",
        "\n",
        "# Training the model with dropout and early stopping\n",
        "history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_val, y_val), class_weight=class_weight_dict, verbose=1, callbacks=[early_stopping])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "32e9cb08-2e53-4dd6-b06b-f014fb74c15d",
        "outputId": "46dccfed-200c-49e3-e3d9-48bec4f2a376"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/20\n",
            "253/253 [==============================] - 6s 17ms/step - loss: 1.6171 - accuracy: 0.2087 - val_loss: 1.6088 - val_accuracy: 0.1865 - lr: 0.0010\n",
            "Epoch 2/20\n",
            "253/253 [==============================] - 4s 17ms/step - loss: 1.4832 - accuracy: 0.3268 - val_loss: 1.4402 - val_accuracy: 0.4088 - lr: 0.0010\n",
            "Epoch 3/20\n",
            "253/253 [==============================] - 5s 20ms/step - loss: 1.2785 - accuracy: 0.4547 - val_loss: 1.3481 - val_accuracy: 0.4665 - lr: 0.0010\n",
            "Epoch 4/20\n",
            "253/253 [==============================] - 5s 19ms/step - loss: 1.1058 - accuracy: 0.5202 - val_loss: 1.2978 - val_accuracy: 0.4677 - lr: 0.0010\n",
            "Epoch 5/20\n",
            "253/253 [==============================] - 5s 19ms/step - loss: 0.9091 - accuracy: 0.5896 - val_loss: 1.2061 - val_accuracy: 0.5115 - lr: 0.0010\n",
            "Epoch 6/20\n",
            "253/253 [==============================] - 5s 18ms/step - loss: 0.7967 - accuracy: 0.6344 - val_loss: 1.1867 - val_accuracy: 0.5346 - lr: 0.0010\n",
            "Epoch 7/20\n",
            "253/253 [==============================] - 5s 19ms/step - loss: 0.7113 - accuracy: 0.6609 - val_loss: 1.1749 - val_accuracy: 0.4815 - lr: 0.0010\n",
            "Epoch 8/20\n",
            "253/253 [==============================] - 5s 18ms/step - loss: 0.6702 - accuracy: 0.6832 - val_loss: 1.1603 - val_accuracy: 0.4919 - lr: 0.0010\n",
            "Epoch 9/20\n",
            "253/253 [==============================] - 4s 18ms/step - loss: 0.6120 - accuracy: 0.7128 - val_loss: 1.1653 - val_accuracy: 0.4671 - lr: 0.0010\n",
            "Epoch 10/20\n",
            "253/253 [==============================] - ETA: 0s - loss: 0.5922 - accuracy: 0.7293\n",
            "Epoch 10: ReduceLROnPlateau reducing learning rate to 0.0005000000237487257.\n",
            "253/253 [==============================] - 5s 18ms/step - loss: 0.5922 - accuracy: 0.7293 - val_loss: 1.1915 - val_accuracy: 0.4654 - lr: 0.0010\n",
            "Epoch 11/20\n",
            "248/253 [============================>.] - ETA: 0s - loss: 0.5137 - accuracy: 0.7616Restoring model weights from the end of the best epoch: 8.\n",
            "253/253 [==============================] - 4s 17ms/step - loss: 0.5127 - accuracy: 0.7622 - val_loss: 1.2008 - val_accuracy: 0.4567 - lr: 5.0000e-04\n",
            "Epoch 11: early stopping\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Embedding, Conv1D, MaxPooling1D, GlobalMaxPooling1D, Dense, Dropout\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "from sklearn.utils.class_weight import compute_class_weight\n",
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n",
        "\n",
        "# Load your dataset\n",
        "data = pd.read_csv('data.csv')\n",
        "\n",
        "# Initialize and fit the tokenizer\n",
        "tokenizer = Tokenizer(num_words=35706)  # Set your vocabulary size\n",
        "tokenizer.fit_on_texts(data['medical_abstract'])\n",
        "sequences = tokenizer.texts_to_sequences(data['medical_abstract'])\n",
        "\n",
        "# Padding sequences\n",
        "max_length = 178  # Use your dataset's mean sequence length\n",
        "sequences_padded = pad_sequences(sequences, maxlen=max_length, padding='post')\n",
        "\n",
        "# Adjust class labels to start from 0 instead of 1\n",
        "data['condition_label'] -= 1\n",
        "\n",
        "# Class weights for handling imbalance\n",
        "class_weights = compute_class_weight('balanced', classes=np.unique(data['condition_label']), y=data['condition_label'])\n",
        "class_weight_dict = dict(enumerate(class_weights))\n",
        "\n",
        "# Splitting the dataset into train, validation, and test sets\n",
        "X_train, X_temp, y_train, y_temp = train_test_split(sequences_padded, data['condition_label'], test_size=0.3, random_state=42)\n",
        "X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)\n",
        "\n",
        "# Converting labels to one-hot encoding\n",
        "y_train = to_categorical(y_train, num_classes=5)\n",
        "y_val = to_categorical(y_val, num_classes=5)\n",
        "y_test = to_categorical(y_test, num_classes=5)\n",
        "\n",
        "# Building the CNN model with increased dropout\n",
        "model = Sequential([\n",
        "    Embedding(input_dim=35706, output_dim=100, input_length=max_length),\n",
        "    Conv1D(filters=128, kernel_size=5, activation='relu'),\n",
        "    Dropout(0.6),  # Increased dropout\n",
        "    MaxPooling1D(pool_size=2),\n",
        "    Conv1D(filters=64, kernel_size=5, activation='relu'),\n",
        "    Dropout(0.6),  # Increased dropout\n",
        "    GlobalMaxPooling1D(),\n",
        "    Dense(64, activation='relu'),\n",
        "    Dropout(0.6),  # Increased dropout before the output layer\n",
        "    Dense(5, activation='softmax')\n",
        "])\n",
        "\n",
        "# Compiling the model\n",
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Early stopping and learning rate reduction setup\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=3, verbose=1, mode='min', restore_best_weights=True)\n",
        "reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=2, min_lr=0.00001, verbose=1)\n",
        "\n",
        "# Training the model with dropout, early stopping, and learning rate reduction\n",
        "history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_val, y_val), class_weight=class_weight_dict, callbacks=[early_stopping, reduce_lr], verbose=1)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ***SVM Extensive Trail***"
      ],
      "metadata": {
        "id": "OLwQCHRNa7DA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.utils import resample"
      ],
      "metadata": {
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "execution": {
          "iopub.status.busy": "2024-05-05T14:46:07.045389Z",
          "iopub.execute_input": "2024-05-05T14:46:07.045840Z",
          "iopub.status.idle": "2024-05-05T14:46:07.053369Z",
          "shell.execute_reply.started": "2024-05-05T14:46:07.045807Z",
          "shell.execute_reply": "2024-05-05T14:46:07.052195Z"
        },
        "trusted": true,
        "id": "LOZxWeUTad0F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load dataset\n",
        "data = pd.read_csv('/kaggle/input/medical-text/data.csv')\n",
        "print(\"Dataset shape:\", data.shape)\n",
        "print(data.head())"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-05-05T14:48:32.014166Z",
          "iopub.execute_input": "2024-05-05T14:48:32.014756Z",
          "iopub.status.idle": "2024-05-05T14:48:32.221547Z",
          "shell.execute_reply.started": "2024-05-05T14:48:32.014686Z",
          "shell.execute_reply": "2024-05-05T14:48:32.220218Z"
        },
        "trusted": true,
        "id": "JJuW-qHLad0H",
        "outputId": "b7ec455e-07e3-4fa5-d78c-7b35234795db"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "text": "Dataset shape: (11550, 2)\n   condition_label                                   medical_abstract\n0                5  Tissue changes around loose prostheses. A cani...\n1                1  Neuropeptide Y and neuron-specific enolase lev...\n2                2  Sexually transmitted diseases of the colon, re...\n3                1  Lipolytic factors associated with murine and h...\n4                3  Does carotid restenosis predict an increased r...\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Encode labels\n",
        "label_encoder = LabelEncoder()\n",
        "data['condition_label'] = label_encoder.fit_transform(data['condition_label'])\n",
        "print(\"Labels encoded successfully.\")\n",
        "print(data[['condition_label']].head())\n",
        "\n",
        "# Text preprocessing and TF-IDF\n",
        "tfidf = TfidfVectorizer(stop_words='english', max_features=1000)\n",
        "features = tfidf.fit_transform(data['medical_abstract'])\n",
        "print(\"TF-IDF Vectorization complete.\")\n",
        "features_df = pd.DataFrame(features.toarray(), columns=tfidf.get_feature_names_out())\n",
        "print(features_df.head())\n"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-05-05T14:48:34.714822Z",
          "iopub.execute_input": "2024-05-05T14:48:34.715224Z",
          "iopub.status.idle": "2024-05-05T14:48:37.383748Z",
          "shell.execute_reply.started": "2024-05-05T14:48:34.715192Z",
          "shell.execute_reply": "2024-05-05T14:48:37.382873Z"
        },
        "trusted": true,
        "id": "MUYs-1VTad0I",
        "outputId": "163fd14f-22da-4f39-adf9-4881536d0a79"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "text": "Labels encoded successfully.\n   condition_label\n0                4\n1                0\n2                1\n3                0\n4                2\nTF-IDF Vectorization complete.\n   000  0001  001   01   02        05        10  100   11        12  ...  \\\n0  0.0   0.0  0.0  0.0  0.0  0.000000  0.000000  0.0  0.0  0.000000  ...   \n1  0.0   0.0  0.0  0.0  0.0  0.000000  0.000000  0.0  0.0  0.000000  ...   \n2  0.0   0.0  0.0  0.0  0.0  0.000000  0.000000  0.0  0.0  0.000000  ...   \n3  0.0   0.0  0.0  0.0  0.0  0.000000  0.000000  0.0  0.0  0.000000  ...   \n4  0.0   0.0  0.0  0.0  0.0  0.062724  0.047762  0.0  0.0  0.052708  ...   \n\n   weeks    weight  white  woman  women  work  year     years  young  younger  \n0    0.0  0.000000    0.0    0.0    0.0   0.0   0.0  0.000000    0.0      0.0  \n1    0.0  0.000000    0.0    0.0    0.0   0.0   0.0  0.000000    0.0      0.0  \n2    0.0  0.069304    0.0    0.0    0.0   0.0   0.0  0.000000    0.0      0.0  \n3    0.0  0.276473    0.0    0.0    0.0   0.0   0.0  0.000000    0.0      0.0  \n4    0.0  0.000000    0.0    0.0    0.0   0.0   0.0  0.048361    0.0      0.0  \n\n[5 rows x 1000 columns]\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Splitting the data into train and test sets, then splitting train into train and validate\n",
        "X_train_test, X_test, y_train_test, y_test = train_test_split(features, data['condition_label'], test_size=0.2, random_state=42)\n",
        "X_train, X_validate, y_train, y_validate = train_test_split(X_train_test, y_train_test, test_size=0.25, random_state=42)  # 0.25 x 0.8 = 0.2\n",
        "print(\"Data split into train, validate, and test sets.\")"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-05-05T14:49:00.350683Z",
          "iopub.execute_input": "2024-05-05T14:49:00.351191Z",
          "iopub.status.idle": "2024-05-05T14:49:00.373471Z",
          "shell.execute_reply.started": "2024-05-05T14:49:00.351152Z",
          "shell.execute_reply": "2024-05-05T14:49:00.372071Z"
        },
        "trusted": true,
        "id": "17HhDcuPad0I",
        "outputId": "9289f603-6baa-447f-ddc6-feaf0f622ccc"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "text": "Data split into train, validate, and test sets.\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.sparse import vstack\n",
        "\n",
        "# Assuming X_train and X_minority_upsampled are both scipy.sparse matrices\n",
        "# and y_train and y_minority_upsampled are pandas Series\n",
        "\n",
        "# Concatenate feature matrices\n",
        "X_train_balanced = vstack([X_train, X_minority_upsampled])\n",
        "\n",
        "# Concatenate labels\n",
        "y_train_balanced = pd.concat([y_train, y_minority_upsampled])\n",
        "print(\"After balancing training set:\\n\", y_train_balanced.value_counts())\n",
        "\n",
        "# Continue with your SVM model training and validation"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-05-05T14:52:08.562397Z",
          "iopub.execute_input": "2024-05-05T14:52:08.562832Z",
          "iopub.status.idle": "2024-05-05T14:52:08.578670Z",
          "shell.execute_reply.started": "2024-05-05T14:52:08.562799Z",
          "shell.execute_reply": "2024-05-05T14:52:08.577207Z"
        },
        "trusted": true,
        "id": "g8_beOc9ad0J",
        "outputId": "dc0a0209-da02-4c27-f177-e1c642e0053e"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "text": "After balancing training set:\n condition_label\n1    3020\n4    2279\n0    1525\n3    1436\n2     949\nName: count, dtype: int64\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the SVM model and parameters for GridSearchCV\n",
        "parameters = {\n",
        "    'C': [0.1, 1, 10, 100],\n",
        "    'gamma': ['scale', 'auto', 0.01, 0.1, 1],\n",
        "    'kernel': ['rbf', 'linear', 'poly', 'sigmoid']\n",
        "}\n",
        "svm = SVC()\n",
        "# Setting verbose=3 for more detailed output during the grid search\n",
        "grid_search = GridSearchCV(svm, parameters, cv=5, scoring='accuracy', verbose=3)\n",
        "grid_search.fit(X_train_balanced, y_train_balanced)\n",
        "print(\"Grid search complete with best parameters:\", grid_search.best_params_)\n",
        "\n",
        "# Best estimator\n",
        "best_svm = grid_search.best_estimator_"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-05-05T14:57:51.195192Z",
          "iopub.execute_input": "2024-05-05T14:57:51.195612Z",
          "iopub.status.idle": "2024-05-05T18:35:36.770525Z",
          "shell.execute_reply.started": "2024-05-05T14:57:51.195568Z",
          "shell.execute_reply": "2024-05-05T18:35:36.768794Z"
        },
        "trusted": true,
        "id": "0FF-rO1Vad0J",
        "outputId": "d784eb98-7a3a-4f61-9dbb-8fe4a3d291ba"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "text": "Fitting 5 folds for each of 80 candidates, totalling 400 fits\n[CV 1/5] END ....C=0.1, gamma=scale, kernel=rbf;, score=0.509 total time=  38.9s\n[CV 2/5] END ....C=0.1, gamma=scale, kernel=rbf;, score=0.502 total time=  39.3s\n[CV 3/5] END ....C=0.1, gamma=scale, kernel=rbf;, score=0.528 total time=  39.1s\n[CV 4/5] END ....C=0.1, gamma=scale, kernel=rbf;, score=0.505 total time=  39.4s\n[CV 5/5] END ....C=0.1, gamma=scale, kernel=rbf;, score=0.504 total time=  39.4s\n[CV 1/5] END .C=0.1, gamma=scale, kernel=linear;, score=0.631 total time=  32.0s\n[CV 2/5] END .C=0.1, gamma=scale, kernel=linear;, score=0.605 total time=  32.2s\n[CV 3/5] END .C=0.1, gamma=scale, kernel=linear;, score=0.622 total time=  32.2s\n[CV 4/5] END .C=0.1, gamma=scale, kernel=linear;, score=0.607 total time=  32.1s\n[CV 5/5] END .C=0.1, gamma=scale, kernel=linear;, score=0.621 total time=  31.9s\n[CV 1/5] END ...C=0.1, gamma=scale, kernel=poly;, score=0.328 total time=  40.5s\n[CV 2/5] END ...C=0.1, gamma=scale, kernel=poly;, score=0.328 total time=  41.0s\n[CV 3/5] END ...C=0.1, gamma=scale, kernel=poly;, score=0.328 total time=  40.8s\n[CV 4/5] END ...C=0.1, gamma=scale, kernel=poly;, score=0.328 total time=  41.0s\n[CV 5/5] END ...C=0.1, gamma=scale, kernel=poly;, score=0.328 total time=  41.0s\n[CV 1/5] END C=0.1, gamma=scale, kernel=sigmoid;, score=0.621 total time=  32.3s\n[CV 2/5] END C=0.1, gamma=scale, kernel=sigmoid;, score=0.593 total time=  32.7s\n[CV 3/5] END C=0.1, gamma=scale, kernel=sigmoid;, score=0.610 total time=  32.6s\n[CV 4/5] END C=0.1, gamma=scale, kernel=sigmoid;, score=0.594 total time=  32.7s\n[CV 5/5] END C=0.1, gamma=scale, kernel=sigmoid;, score=0.616 total time=  32.5s\n[CV 1/5] END .....C=0.1, gamma=auto, kernel=rbf;, score=0.328 total time=  37.6s\n[CV 2/5] END .....C=0.1, gamma=auto, kernel=rbf;, score=0.328 total time=  37.8s\n[CV 3/5] END .....C=0.1, gamma=auto, kernel=rbf;, score=0.328 total time=  37.7s\n[CV 4/5] END .....C=0.1, gamma=auto, kernel=rbf;, score=0.328 total time=  37.9s\n[CV 5/5] END .....C=0.1, gamma=auto, kernel=rbf;, score=0.328 total time=  37.9s\n[CV 1/5] END ..C=0.1, gamma=auto, kernel=linear;, score=0.631 total time=  31.7s\n[CV 2/5] END ..C=0.1, gamma=auto, kernel=linear;, score=0.605 total time=  32.0s\n[CV 3/5] END ..C=0.1, gamma=auto, kernel=linear;, score=0.622 total time=  32.0s\n[CV 4/5] END ..C=0.1, gamma=auto, kernel=linear;, score=0.607 total time=  32.0s\n[CV 5/5] END ..C=0.1, gamma=auto, kernel=linear;, score=0.621 total time=  31.8s\n[CV 1/5] END ....C=0.1, gamma=auto, kernel=poly;, score=0.328 total time=  35.4s\n[CV 2/5] END ....C=0.1, gamma=auto, kernel=poly;, score=0.328 total time=  35.5s\n[CV 3/5] END ....C=0.1, gamma=auto, kernel=poly;, score=0.328 total time=  35.7s\n[CV 4/5] END ....C=0.1, gamma=auto, kernel=poly;, score=0.328 total time=  35.7s\n[CV 5/5] END ....C=0.1, gamma=auto, kernel=poly;, score=0.328 total time=  35.4s\n[CV 1/5] END .C=0.1, gamma=auto, kernel=sigmoid;, score=0.328 total time=  36.4s\n[CV 2/5] END .C=0.1, gamma=auto, kernel=sigmoid;, score=0.328 total time=  36.6s\n[CV 3/5] END .C=0.1, gamma=auto, kernel=sigmoid;, score=0.328 total time=  36.7s\n[CV 4/5] END .C=0.1, gamma=auto, kernel=sigmoid;, score=0.328 total time=  36.7s\n[CV 5/5] END .C=0.1, gamma=auto, kernel=sigmoid;, score=0.328 total time=  36.6s\n[CV 1/5] END .....C=0.1, gamma=0.01, kernel=rbf;, score=0.328 total time=  38.3s\n[CV 2/5] END .....C=0.1, gamma=0.01, kernel=rbf;, score=0.328 total time=  38.8s\n[CV 3/5] END .....C=0.1, gamma=0.01, kernel=rbf;, score=0.328 total time=  38.8s\n[CV 4/5] END .....C=0.1, gamma=0.01, kernel=rbf;, score=0.328 total time=  38.8s\n[CV 5/5] END .....C=0.1, gamma=0.01, kernel=rbf;, score=0.328 total time=  38.8s\n[CV 1/5] END ..C=0.1, gamma=0.01, kernel=linear;, score=0.631 total time=  32.0s\n[CV 2/5] END ..C=0.1, gamma=0.01, kernel=linear;, score=0.605 total time=  32.6s\n[CV 3/5] END ..C=0.1, gamma=0.01, kernel=linear;, score=0.622 total time=  32.7s\n[CV 4/5] END ..C=0.1, gamma=0.01, kernel=linear;, score=0.607 total time=  32.5s\n[CV 5/5] END ..C=0.1, gamma=0.01, kernel=linear;, score=0.621 total time=  32.2s\n[CV 1/5] END ....C=0.1, gamma=0.01, kernel=poly;, score=0.328 total time=  35.5s\n[CV 2/5] END ....C=0.1, gamma=0.01, kernel=poly;, score=0.328 total time=  35.7s\n[CV 3/5] END ....C=0.1, gamma=0.01, kernel=poly;, score=0.328 total time=  35.6s\n[CV 4/5] END ....C=0.1, gamma=0.01, kernel=poly;, score=0.328 total time=  36.1s\n[CV 5/5] END ....C=0.1, gamma=0.01, kernel=poly;, score=0.328 total time=  36.2s\n[CV 1/5] END .C=0.1, gamma=0.01, kernel=sigmoid;, score=0.328 total time=  38.0s\n[CV 2/5] END .C=0.1, gamma=0.01, kernel=sigmoid;, score=0.328 total time=  38.2s\n[CV 3/5] END .C=0.1, gamma=0.01, kernel=sigmoid;, score=0.328 total time=  37.9s\n[CV 4/5] END .C=0.1, gamma=0.01, kernel=sigmoid;, score=0.328 total time=  38.0s\n[CV 5/5] END .C=0.1, gamma=0.01, kernel=sigmoid;, score=0.328 total time=  38.2s\n[CV 1/5] END ......C=0.1, gamma=0.1, kernel=rbf;, score=0.331 total time=  38.5s\n[CV 2/5] END ......C=0.1, gamma=0.1, kernel=rbf;, score=0.332 total time=  39.2s\n[CV 3/5] END ......C=0.1, gamma=0.1, kernel=rbf;, score=0.332 total time=  38.5s\n[CV 4/5] END ......C=0.1, gamma=0.1, kernel=rbf;, score=0.333 total time=  38.8s\n[CV 5/5] END ......C=0.1, gamma=0.1, kernel=rbf;, score=0.331 total time=  38.6s\n[CV 1/5] END ...C=0.1, gamma=0.1, kernel=linear;, score=0.631 total time=  31.8s\n[CV 2/5] END ...C=0.1, gamma=0.1, kernel=linear;, score=0.605 total time=  32.1s\n[CV 3/5] END ...C=0.1, gamma=0.1, kernel=linear;, score=0.622 total time=  32.2s\n[CV 4/5] END ...C=0.1, gamma=0.1, kernel=linear;, score=0.607 total time=  32.3s\n[CV 5/5] END ...C=0.1, gamma=0.1, kernel=linear;, score=0.621 total time=  32.1s\n[CV 1/5] END .....C=0.1, gamma=0.1, kernel=poly;, score=0.328 total time=  35.7s\n[CV 2/5] END .....C=0.1, gamma=0.1, kernel=poly;, score=0.328 total time=  35.9s\n[CV 3/5] END .....C=0.1, gamma=0.1, kernel=poly;, score=0.328 total time=  35.7s\n[CV 4/5] END .....C=0.1, gamma=0.1, kernel=poly;, score=0.328 total time=  36.0s\n[CV 5/5] END .....C=0.1, gamma=0.1, kernel=poly;, score=0.328 total time=  36.3s\n[CV 1/5] END ..C=0.1, gamma=0.1, kernel=sigmoid;, score=0.328 total time=  38.6s\n[CV 2/5] END ..C=0.1, gamma=0.1, kernel=sigmoid;, score=0.328 total time=  38.9s\n[CV 3/5] END ..C=0.1, gamma=0.1, kernel=sigmoid;, score=0.328 total time=  38.9s\n[CV 4/5] END ..C=0.1, gamma=0.1, kernel=sigmoid;, score=0.328 total time=  38.9s\n[CV 5/5] END ..C=0.1, gamma=0.1, kernel=sigmoid;, score=0.328 total time=  39.0s\n[CV 1/5] END ........C=0.1, gamma=1, kernel=rbf;, score=0.514 total time=  39.6s\n[CV 2/5] END ........C=0.1, gamma=1, kernel=rbf;, score=0.505 total time=  40.2s\n[CV 3/5] END ........C=0.1, gamma=1, kernel=rbf;, score=0.534 total time=  39.8s\n[CV 4/5] END ........C=0.1, gamma=1, kernel=rbf;, score=0.510 total time=  39.9s\n[CV 5/5] END ........C=0.1, gamma=1, kernel=rbf;, score=0.508 total time=  40.1s\n[CV 1/5] END .....C=0.1, gamma=1, kernel=linear;, score=0.631 total time=  32.7s\n[CV 2/5] END .....C=0.1, gamma=1, kernel=linear;, score=0.605 total time=  33.0s\n[CV 3/5] END .....C=0.1, gamma=1, kernel=linear;, score=0.622 total time=  33.1s\n[CV 4/5] END .....C=0.1, gamma=1, kernel=linear;, score=0.607 total time=  32.6s\n[CV 5/5] END .....C=0.1, gamma=1, kernel=linear;, score=0.621 total time=  32.7s\n[CV 1/5] END .......C=0.1, gamma=1, kernel=poly;, score=0.328 total time=  41.5s\n[CV 2/5] END .......C=0.1, gamma=1, kernel=poly;, score=0.328 total time=  41.9s\n[CV 3/5] END .......C=0.1, gamma=1, kernel=poly;, score=0.328 total time=  41.9s\n[CV 4/5] END .......C=0.1, gamma=1, kernel=poly;, score=0.328 total time=  42.0s\n[CV 5/5] END .......C=0.1, gamma=1, kernel=poly;, score=0.328 total time=  42.5s\n[CV 1/5] END ....C=0.1, gamma=1, kernel=sigmoid;, score=0.621 total time=  33.4s\n[CV 2/5] END ....C=0.1, gamma=1, kernel=sigmoid;, score=0.593 total time=  33.5s\n[CV 3/5] END ....C=0.1, gamma=1, kernel=sigmoid;, score=0.610 total time=  33.6s\n[CV 4/5] END ....C=0.1, gamma=1, kernel=sigmoid;, score=0.594 total time=  33.3s\n[CV 5/5] END ....C=0.1, gamma=1, kernel=sigmoid;, score=0.615 total time=  33.6s\n[CV 1/5] END ......C=1, gamma=scale, kernel=rbf;, score=0.692 total time=  30.9s\n[CV 2/5] END ......C=1, gamma=scale, kernel=rbf;, score=0.669 total time=  31.7s\n[CV 3/5] END ......C=1, gamma=scale, kernel=rbf;, score=0.678 total time=  31.5s\n[CV 4/5] END ......C=1, gamma=scale, kernel=rbf;, score=0.685 total time=  32.0s\n[CV 5/5] END ......C=1, gamma=scale, kernel=rbf;, score=0.685 total time=  31.9s\n[CV 1/5] END ...C=1, gamma=scale, kernel=linear;, score=0.668 total time=  23.2s\n[CV 2/5] END ...C=1, gamma=scale, kernel=linear;, score=0.634 total time=  23.4s\n[CV 3/5] END ...C=1, gamma=scale, kernel=linear;, score=0.667 total time=  23.4s\n[CV 4/5] END ...C=1, gamma=scale, kernel=linear;, score=0.664 total time=  23.0s\n[CV 5/5] END ...C=1, gamma=scale, kernel=linear;, score=0.660 total time=  23.1s\n[CV 1/5] END .....C=1, gamma=scale, kernel=poly;, score=0.631 total time=  37.0s\n[CV 2/5] END .....C=1, gamma=scale, kernel=poly;, score=0.622 total time=  37.6s\n[CV 3/5] END .....C=1, gamma=scale, kernel=poly;, score=0.635 total time=  37.4s\n[CV 4/5] END .....C=1, gamma=scale, kernel=poly;, score=0.644 total time=  37.4s\n[CV 5/5] END .....C=1, gamma=scale, kernel=poly;, score=0.636 total time=  37.0s\n[CV 1/5] END ..C=1, gamma=scale, kernel=sigmoid;, score=0.635 total time=  23.4s\n[CV 2/5] END ..C=1, gamma=scale, kernel=sigmoid;, score=0.613 total time=  23.1s\n[CV 3/5] END ..C=1, gamma=scale, kernel=sigmoid;, score=0.650 total time=  23.9s\n[CV 4/5] END ..C=1, gamma=scale, kernel=sigmoid;, score=0.625 total time=  24.0s\n[CV 5/5] END ..C=1, gamma=scale, kernel=sigmoid;, score=0.640 total time=  23.8s\n[CV 1/5] END .......C=1, gamma=auto, kernel=rbf;, score=0.328 total time=  39.1s\n[CV 2/5] END .......C=1, gamma=auto, kernel=rbf;, score=0.328 total time=  39.7s\n[CV 3/5] END .......C=1, gamma=auto, kernel=rbf;, score=0.328 total time=  39.5s\n[CV 4/5] END .......C=1, gamma=auto, kernel=rbf;, score=0.328 total time=  40.1s\n[CV 5/5] END .......C=1, gamma=auto, kernel=rbf;, score=0.328 total time=  39.5s\n[CV 1/5] END ....C=1, gamma=auto, kernel=linear;, score=0.668 total time=  23.0s\n[CV 2/5] END ....C=1, gamma=auto, kernel=linear;, score=0.634 total time=  23.2s\n[CV 3/5] END ....C=1, gamma=auto, kernel=linear;, score=0.667 total time=  23.1s\n[CV 4/5] END ....C=1, gamma=auto, kernel=linear;, score=0.664 total time=  23.0s\n[CV 5/5] END ....C=1, gamma=auto, kernel=linear;, score=0.660 total time=  23.2s\n[CV 1/5] END ......C=1, gamma=auto, kernel=poly;, score=0.328 total time=  35.9s\n[CV 2/5] END ......C=1, gamma=auto, kernel=poly;, score=0.328 total time=  36.4s\n[CV 3/5] END ......C=1, gamma=auto, kernel=poly;, score=0.328 total time=  36.2s\n[CV 4/5] END ......C=1, gamma=auto, kernel=poly;, score=0.328 total time=  36.1s\n[CV 5/5] END ......C=1, gamma=auto, kernel=poly;, score=0.328 total time=  35.7s\n[CV 1/5] END ...C=1, gamma=auto, kernel=sigmoid;, score=0.328 total time=  37.6s\n[CV 2/5] END ...C=1, gamma=auto, kernel=sigmoid;, score=0.328 total time=  38.1s\n[CV 3/5] END ...C=1, gamma=auto, kernel=sigmoid;, score=0.328 total time=  38.1s\n[CV 4/5] END ...C=1, gamma=auto, kernel=sigmoid;, score=0.328 total time=  37.8s\n[CV 5/5] END ...C=1, gamma=auto, kernel=sigmoid;, score=0.328 total time=  37.9s\n[CV 1/5] END .......C=1, gamma=0.01, kernel=rbf;, score=0.341 total time=  38.2s\n[CV 2/5] END .......C=1, gamma=0.01, kernel=rbf;, score=0.340 total time=  38.7s\n[CV 3/5] END .......C=1, gamma=0.01, kernel=rbf;, score=0.340 total time=  38.6s\n[CV 4/5] END .......C=1, gamma=0.01, kernel=rbf;, score=0.337 total time=  38.8s\n[CV 5/5] END .......C=1, gamma=0.01, kernel=rbf;, score=0.342 total time=  39.1s\n[CV 1/5] END ....C=1, gamma=0.01, kernel=linear;, score=0.668 total time=  23.0s\n[CV 2/5] END ....C=1, gamma=0.01, kernel=linear;, score=0.634 total time=  23.0s\n[CV 3/5] END ....C=1, gamma=0.01, kernel=linear;, score=0.667 total time=  23.1s\n[CV 4/5] END ....C=1, gamma=0.01, kernel=linear;, score=0.664 total time=  23.4s\n[CV 5/5] END ....C=1, gamma=0.01, kernel=linear;, score=0.660 total time=  23.1s\n[CV 1/5] END ......C=1, gamma=0.01, kernel=poly;, score=0.328 total time=  35.9s\n[CV 2/5] END ......C=1, gamma=0.01, kernel=poly;, score=0.328 total time=  36.1s\n[CV 3/5] END ......C=1, gamma=0.01, kernel=poly;, score=0.328 total time=  36.0s\n[CV 4/5] END ......C=1, gamma=0.01, kernel=poly;, score=0.328 total time=  36.0s\n[CV 5/5] END ......C=1, gamma=0.01, kernel=poly;, score=0.328 total time=  35.9s\n[CV 1/5] END ...C=1, gamma=0.01, kernel=sigmoid;, score=0.328 total time=  38.0s\n[CV 2/5] END ...C=1, gamma=0.01, kernel=sigmoid;, score=0.328 total time=  38.4s\n[CV 3/5] END ...C=1, gamma=0.01, kernel=sigmoid;, score=0.328 total time=  38.4s\n[CV 4/5] END ...C=1, gamma=0.01, kernel=sigmoid;, score=0.328 total time=  38.5s\n[CV 5/5] END ...C=1, gamma=0.01, kernel=sigmoid;, score=0.328 total time=  38.2s\n[CV 1/5] END ........C=1, gamma=0.1, kernel=rbf;, score=0.656 total time=  30.8s\n[CV 2/5] END ........C=1, gamma=0.1, kernel=rbf;, score=0.619 total time=  31.1s\n[CV 3/5] END ........C=1, gamma=0.1, kernel=rbf;, score=0.642 total time=  31.5s\n[CV 4/5] END ........C=1, gamma=0.1, kernel=rbf;, score=0.644 total time=  31.4s\n[CV 5/5] END ........C=1, gamma=0.1, kernel=rbf;, score=0.658 total time=  31.3s\n[CV 1/5] END .....C=1, gamma=0.1, kernel=linear;, score=0.668 total time=  22.8s\n[CV 2/5] END .....C=1, gamma=0.1, kernel=linear;, score=0.634 total time=  22.8s\n[CV 3/5] END .....C=1, gamma=0.1, kernel=linear;, score=0.667 total time=  22.9s\n[CV 4/5] END .....C=1, gamma=0.1, kernel=linear;, score=0.664 total time=  22.9s\n[CV 5/5] END .....C=1, gamma=0.1, kernel=linear;, score=0.660 total time=  23.0s\n[CV 1/5] END .......C=1, gamma=0.1, kernel=poly;, score=0.328 total time=  37.2s\n[CV 2/5] END .......C=1, gamma=0.1, kernel=poly;, score=0.328 total time=  37.3s\n[CV 3/5] END .......C=1, gamma=0.1, kernel=poly;, score=0.328 total time=  37.2s\n[CV 4/5] END .......C=1, gamma=0.1, kernel=poly;, score=0.328 total time=  37.1s\n[CV 5/5] END .......C=1, gamma=0.1, kernel=poly;, score=0.328 total time=  37.2s\n[CV 1/5] END ....C=1, gamma=0.1, kernel=sigmoid;, score=0.631 total time=  32.5s\n[CV 2/5] END ....C=1, gamma=0.1, kernel=sigmoid;, score=0.605 total time=  32.9s\n[CV 3/5] END ....C=1, gamma=0.1, kernel=sigmoid;, score=0.622 total time=  33.0s\n[CV 4/5] END ....C=1, gamma=0.1, kernel=sigmoid;, score=0.607 total time=  33.1s\n[CV 5/5] END ....C=1, gamma=0.1, kernel=sigmoid;, score=0.621 total time=  33.2s\n[CV 1/5] END ..........C=1, gamma=1, kernel=rbf;, score=0.691 total time=  30.3s\n[CV 2/5] END ..........C=1, gamma=1, kernel=rbf;, score=0.669 total time=  31.1s\n[CV 3/5] END ..........C=1, gamma=1, kernel=rbf;, score=0.678 total time=  31.3s\n[CV 4/5] END ..........C=1, gamma=1, kernel=rbf;, score=0.685 total time=  31.1s\n[CV 5/5] END ..........C=1, gamma=1, kernel=rbf;, score=0.686 total time=  31.3s\n[CV 1/5] END .......C=1, gamma=1, kernel=linear;, score=0.668 total time=  22.8s\n[CV 2/5] END .......C=1, gamma=1, kernel=linear;, score=0.634 total time=  22.9s\n[CV 3/5] END .......C=1, gamma=1, kernel=linear;, score=0.667 total time=  23.3s\n[CV 4/5] END .......C=1, gamma=1, kernel=linear;, score=0.664 total time=  22.9s\n[CV 5/5] END .......C=1, gamma=1, kernel=linear;, score=0.660 total time=  23.0s\n[CV 1/5] END .........C=1, gamma=1, kernel=poly;, score=0.626 total time=  37.2s\n[CV 2/5] END .........C=1, gamma=1, kernel=poly;, score=0.617 total time=  37.6s\n[CV 3/5] END .........C=1, gamma=1, kernel=poly;, score=0.630 total time=  37.5s\n[CV 4/5] END .........C=1, gamma=1, kernel=poly;, score=0.641 total time=  37.6s\n[CV 5/5] END .........C=1, gamma=1, kernel=poly;, score=0.630 total time=  37.5s\n[CV 1/5] END ......C=1, gamma=1, kernel=sigmoid;, score=0.640 total time=  23.2s\n[CV 2/5] END ......C=1, gamma=1, kernel=sigmoid;, score=0.613 total time=  23.6s\n[CV 3/5] END ......C=1, gamma=1, kernel=sigmoid;, score=0.650 total time=  23.5s\n[CV 4/5] END ......C=1, gamma=1, kernel=sigmoid;, score=0.626 total time=  23.3s\n[CV 5/5] END ......C=1, gamma=1, kernel=sigmoid;, score=0.639 total time=  23.6s\n[CV 1/5] END .....C=10, gamma=scale, kernel=rbf;, score=0.678 total time=  34.1s\n[CV 2/5] END .....C=10, gamma=scale, kernel=rbf;, score=0.659 total time=  34.6s\n[CV 3/5] END .....C=10, gamma=scale, kernel=rbf;, score=0.669 total time=  35.0s\n[CV 4/5] END .....C=10, gamma=scale, kernel=rbf;, score=0.682 total time=  34.7s\n[CV 5/5] END .....C=10, gamma=scale, kernel=rbf;, score=0.666 total time=  34.6s\n[CV 1/5] END ..C=10, gamma=scale, kernel=linear;, score=0.631 total time=  21.6s\n[CV 2/5] END ..C=10, gamma=scale, kernel=linear;, score=0.626 total time=  22.0s\n[CV 3/5] END ..C=10, gamma=scale, kernel=linear;, score=0.636 total time=  22.1s\n[CV 4/5] END ..C=10, gamma=scale, kernel=linear;, score=0.634 total time=  22.3s\n[CV 5/5] END ..C=10, gamma=scale, kernel=linear;, score=0.638 total time=  21.8s\n[CV 1/5] END ....C=10, gamma=scale, kernel=poly;, score=0.637 total time=  35.0s\n[CV 2/5] END ....C=10, gamma=scale, kernel=poly;, score=0.629 total time=  35.5s\n[CV 3/5] END ....C=10, gamma=scale, kernel=poly;, score=0.640 total time=  35.4s\n[CV 4/5] END ....C=10, gamma=scale, kernel=poly;, score=0.650 total time=  35.4s\n[CV 5/5] END ....C=10, gamma=scale, kernel=poly;, score=0.644 total time=  35.5s\n[CV 1/5] END .C=10, gamma=scale, kernel=sigmoid;, score=0.595 total time=  21.9s\n[CV 2/5] END .C=10, gamma=scale, kernel=sigmoid;, score=0.580 total time=  21.4s\n[CV 3/5] END .C=10, gamma=scale, kernel=sigmoid;, score=0.608 total time=  22.8s\n[CV 4/5] END .C=10, gamma=scale, kernel=sigmoid;, score=0.579 total time=  21.1s\n[CV 5/5] END .C=10, gamma=scale, kernel=sigmoid;, score=0.598 total time=  21.5s\n[CV 1/5] END ......C=10, gamma=auto, kernel=rbf;, score=0.341 total time=  38.2s\n[CV 2/5] END ......C=10, gamma=auto, kernel=rbf;, score=0.342 total time=  38.6s\n[CV 3/5] END ......C=10, gamma=auto, kernel=rbf;, score=0.340 total time=  38.6s\n[CV 4/5] END ......C=10, gamma=auto, kernel=rbf;, score=0.339 total time=  38.7s\n[CV 5/5] END ......C=10, gamma=auto, kernel=rbf;, score=0.342 total time=  38.8s\n[CV 1/5] END ...C=10, gamma=auto, kernel=linear;, score=0.631 total time=  21.5s\n[CV 2/5] END ...C=10, gamma=auto, kernel=linear;, score=0.626 total time=  22.0s\n[CV 3/5] END ...C=10, gamma=auto, kernel=linear;, score=0.636 total time=  22.0s\n[CV 4/5] END ...C=10, gamma=auto, kernel=linear;, score=0.634 total time=  22.2s\n[CV 5/5] END ...C=10, gamma=auto, kernel=linear;, score=0.638 total time=  21.8s\n[CV 1/5] END .....C=10, gamma=auto, kernel=poly;, score=0.328 total time=  35.3s\n[CV 2/5] END .....C=10, gamma=auto, kernel=poly;, score=0.328 total time=  35.8s\n[CV 3/5] END .....C=10, gamma=auto, kernel=poly;, score=0.328 total time=  35.7s\n[CV 4/5] END .....C=10, gamma=auto, kernel=poly;, score=0.328 total time=  35.6s\n[CV 5/5] END .....C=10, gamma=auto, kernel=poly;, score=0.328 total time=  35.7s\n[CV 1/5] END ..C=10, gamma=auto, kernel=sigmoid;, score=0.328 total time=  37.8s\n[CV 2/5] END ..C=10, gamma=auto, kernel=sigmoid;, score=0.328 total time=  38.3s\n[CV 3/5] END ..C=10, gamma=auto, kernel=sigmoid;, score=0.328 total time=  38.2s\n[CV 4/5] END ..C=10, gamma=auto, kernel=sigmoid;, score=0.328 total time=  38.4s\n[CV 5/5] END ..C=10, gamma=auto, kernel=sigmoid;, score=0.328 total time=  38.0s\n[CV 1/5] END ......C=10, gamma=0.01, kernel=rbf;, score=0.660 total time=  30.0s\n[CV 2/5] END ......C=10, gamma=0.01, kernel=rbf;, score=0.621 total time=  30.0s\n[CV 3/5] END ......C=10, gamma=0.01, kernel=rbf;, score=0.644 total time=  30.1s\n[CV 4/5] END ......C=10, gamma=0.01, kernel=rbf;, score=0.648 total time=  30.1s\n[CV 5/5] END ......C=10, gamma=0.01, kernel=rbf;, score=0.661 total time=  30.0s\n[CV 1/5] END ...C=10, gamma=0.01, kernel=linear;, score=0.631 total time=  21.6s\n[CV 2/5] END ...C=10, gamma=0.01, kernel=linear;, score=0.626 total time=  22.1s\n[CV 3/5] END ...C=10, gamma=0.01, kernel=linear;, score=0.636 total time=  22.2s\n[CV 4/5] END ...C=10, gamma=0.01, kernel=linear;, score=0.634 total time=  22.6s\n[CV 5/5] END ...C=10, gamma=0.01, kernel=linear;, score=0.638 total time=  22.1s\n[CV 1/5] END .....C=10, gamma=0.01, kernel=poly;, score=0.328 total time=  35.6s\n[CV 2/5] END .....C=10, gamma=0.01, kernel=poly;, score=0.328 total time=  35.8s\n[CV 3/5] END .....C=10, gamma=0.01, kernel=poly;, score=0.328 total time=  35.7s\n[CV 4/5] END .....C=10, gamma=0.01, kernel=poly;, score=0.328 total time=  35.6s\n[CV 5/5] END .....C=10, gamma=0.01, kernel=poly;, score=0.328 total time=  35.6s\n[CV 1/5] END ..C=10, gamma=0.01, kernel=sigmoid;, score=0.631 total time=  32.7s\n[CV 2/5] END ..C=10, gamma=0.01, kernel=sigmoid;, score=0.605 total time=  32.8s\n[CV 3/5] END ..C=10, gamma=0.01, kernel=sigmoid;, score=0.622 total time=  33.1s\n[CV 4/5] END ..C=10, gamma=0.01, kernel=sigmoid;, score=0.607 total time=  33.3s\n[CV 5/5] END ..C=10, gamma=0.01, kernel=sigmoid;, score=0.621 total time=  33.0s\n[CV 1/5] END .......C=10, gamma=0.1, kernel=rbf;, score=0.668 total time=  22.9s\n[CV 2/5] END .......C=10, gamma=0.1, kernel=rbf;, score=0.640 total time=  23.3s\n[CV 3/5] END .......C=10, gamma=0.1, kernel=rbf;, score=0.669 total time=  23.4s\n[CV 4/5] END .......C=10, gamma=0.1, kernel=rbf;, score=0.669 total time=  23.3s\n[CV 5/5] END .......C=10, gamma=0.1, kernel=rbf;, score=0.662 total time=  23.3s\n[CV 1/5] END ....C=10, gamma=0.1, kernel=linear;, score=0.631 total time=  21.5s\n[CV 2/5] END ....C=10, gamma=0.1, kernel=linear;, score=0.626 total time=  22.0s\n[CV 3/5] END ....C=10, gamma=0.1, kernel=linear;, score=0.636 total time=  22.0s\n[CV 4/5] END ....C=10, gamma=0.1, kernel=linear;, score=0.634 total time=  22.3s\n[CV 5/5] END ....C=10, gamma=0.1, kernel=linear;, score=0.638 total time=  21.8s\n[CV 1/5] END ......C=10, gamma=0.1, kernel=poly;, score=0.328 total time=  40.7s\n[CV 2/5] END ......C=10, gamma=0.1, kernel=poly;, score=0.328 total time=  40.9s\n[CV 3/5] END ......C=10, gamma=0.1, kernel=poly;, score=0.328 total time=  40.9s\n[CV 4/5] END ......C=10, gamma=0.1, kernel=poly;, score=0.328 total time=  40.7s\n[CV 5/5] END ......C=10, gamma=0.1, kernel=poly;, score=0.328 total time=  40.9s\n[CV 1/5] END ...C=10, gamma=0.1, kernel=sigmoid;, score=0.668 total time=  23.1s\n[CV 2/5] END ...C=10, gamma=0.1, kernel=sigmoid;, score=0.634 total time=  23.4s\n[CV 3/5] END ...C=10, gamma=0.1, kernel=sigmoid;, score=0.667 total time=  23.3s\n[CV 4/5] END ...C=10, gamma=0.1, kernel=sigmoid;, score=0.663 total time=  23.5s\n[CV 5/5] END ...C=10, gamma=0.1, kernel=sigmoid;, score=0.661 total time=  23.4s\n[CV 1/5] END .........C=10, gamma=1, kernel=rbf;, score=0.679 total time=  34.3s\n[CV 2/5] END .........C=10, gamma=1, kernel=rbf;, score=0.660 total time=  34.6s\n[CV 3/5] END .........C=10, gamma=1, kernel=rbf;, score=0.669 total time=  34.7s\n[CV 4/5] END .........C=10, gamma=1, kernel=rbf;, score=0.682 total time=  34.6s\n[CV 5/5] END .........C=10, gamma=1, kernel=rbf;, score=0.666 total time=  34.5s\n[CV 1/5] END ......C=10, gamma=1, kernel=linear;, score=0.631 total time=  21.5s\n[CV 2/5] END ......C=10, gamma=1, kernel=linear;, score=0.626 total time=  22.0s\n[CV 3/5] END ......C=10, gamma=1, kernel=linear;, score=0.636 total time=  22.0s\n[CV 4/5] END ......C=10, gamma=1, kernel=linear;, score=0.634 total time=  22.3s\n[CV 5/5] END ......C=10, gamma=1, kernel=linear;, score=0.638 total time=  21.8s\n[CV 1/5] END ........C=10, gamma=1, kernel=poly;, score=0.637 total time=  35.0s\n[CV 2/5] END ........C=10, gamma=1, kernel=poly;, score=0.629 total time=  35.8s\n[CV 3/5] END ........C=10, gamma=1, kernel=poly;, score=0.640 total time=  35.9s\n[CV 4/5] END ........C=10, gamma=1, kernel=poly;, score=0.650 total time=  35.8s\n[CV 5/5] END ........C=10, gamma=1, kernel=poly;, score=0.644 total time=  36.0s\n[CV 1/5] END .....C=10, gamma=1, kernel=sigmoid;, score=0.597 total time=  21.8s\n[CV 2/5] END .....C=10, gamma=1, kernel=sigmoid;, score=0.582 total time=  22.9s\n[CV 3/5] END .....C=10, gamma=1, kernel=sigmoid;, score=0.615 total time=  21.6s\n[CV 4/5] END .....C=10, gamma=1, kernel=sigmoid;, score=0.583 total time=  21.7s\n[CV 5/5] END .....C=10, gamma=1, kernel=sigmoid;, score=0.587 total time=  21.9s\n[CV 1/5] END ....C=100, gamma=scale, kernel=rbf;, score=0.678 total time=  34.3s\n[CV 2/5] END ....C=100, gamma=scale, kernel=rbf;, score=0.659 total time=  34.6s\n[CV 3/5] END ....C=100, gamma=scale, kernel=rbf;, score=0.669 total time=  34.9s\n[CV 4/5] END ....C=100, gamma=scale, kernel=rbf;, score=0.682 total time=  34.8s\n[CV 5/5] END ....C=100, gamma=scale, kernel=rbf;, score=0.666 total time=  34.7s\n[CV 1/5] END .C=100, gamma=scale, kernel=linear;, score=0.619 total time=  40.9s\n[CV 2/5] END .C=100, gamma=scale, kernel=linear;, score=0.603 total time=  41.5s\n[CV 3/5] END .C=100, gamma=scale, kernel=linear;, score=0.624 total time=  43.3s\n[CV 4/5] END .C=100, gamma=scale, kernel=linear;, score=0.609 total time=  37.9s\n[CV 5/5] END .C=100, gamma=scale, kernel=linear;, score=0.612 total time=  38.8s\n[CV 1/5] END ...C=100, gamma=scale, kernel=poly;, score=0.637 total time=  35.1s\n[CV 2/5] END ...C=100, gamma=scale, kernel=poly;, score=0.629 total time=  35.6s\n[CV 3/5] END ...C=100, gamma=scale, kernel=poly;, score=0.640 total time=  35.5s\n[CV 4/5] END ...C=100, gamma=scale, kernel=poly;, score=0.650 total time=  35.5s\n[CV 5/5] END ...C=100, gamma=scale, kernel=poly;, score=0.644 total time=  35.6s\n[CV 1/5] END C=100, gamma=scale, kernel=sigmoid;, score=0.572 total time=  23.5s\n[CV 2/5] END C=100, gamma=scale, kernel=sigmoid;, score=0.570 total time=  24.3s\n[CV 3/5] END C=100, gamma=scale, kernel=sigmoid;, score=0.588 total time=  23.4s\n[CV 4/5] END C=100, gamma=scale, kernel=sigmoid;, score=0.568 total time=  23.4s\n[CV 5/5] END C=100, gamma=scale, kernel=sigmoid;, score=0.580 total time=  23.2s\n[CV 1/5] END .....C=100, gamma=auto, kernel=rbf;, score=0.660 total time=  29.9s\n[CV 2/5] END .....C=100, gamma=auto, kernel=rbf;, score=0.622 total time=  30.5s\n[CV 3/5] END .....C=100, gamma=auto, kernel=rbf;, score=0.645 total time=  30.4s\n[CV 4/5] END .....C=100, gamma=auto, kernel=rbf;, score=0.647 total time=  30.1s\n[CV 5/5] END .....C=100, gamma=auto, kernel=rbf;, score=0.662 total time=  30.0s\n[CV 1/5] END ..C=100, gamma=auto, kernel=linear;, score=0.619 total time=  41.0s\n[CV 2/5] END ..C=100, gamma=auto, kernel=linear;, score=0.603 total time=  41.4s\n[CV 3/5] END ..C=100, gamma=auto, kernel=linear;, score=0.624 total time=  43.5s\n[CV 4/5] END ..C=100, gamma=auto, kernel=linear;, score=0.609 total time=  38.2s\n[CV 5/5] END ..C=100, gamma=auto, kernel=linear;, score=0.612 total time=  38.8s\n[CV 1/5] END ....C=100, gamma=auto, kernel=poly;, score=0.328 total time=  35.5s\n[CV 2/5] END ....C=100, gamma=auto, kernel=poly;, score=0.328 total time=  35.9s\n[CV 3/5] END ....C=100, gamma=auto, kernel=poly;, score=0.328 total time=  35.7s\n[CV 4/5] END ....C=100, gamma=auto, kernel=poly;, score=0.328 total time=  35.8s\n[CV 5/5] END ....C=100, gamma=auto, kernel=poly;, score=0.328 total time=  35.8s\n[CV 1/5] END .C=100, gamma=auto, kernel=sigmoid;, score=0.631 total time=  32.8s\n[CV 2/5] END .C=100, gamma=auto, kernel=sigmoid;, score=0.605 total time=  33.1s\n[CV 3/5] END .C=100, gamma=auto, kernel=sigmoid;, score=0.622 total time=  33.0s\n[CV 4/5] END .C=100, gamma=auto, kernel=sigmoid;, score=0.607 total time=  33.0s\n[CV 5/5] END .C=100, gamma=auto, kernel=sigmoid;, score=0.621 total time=  33.0s\n[CV 1/5] END .....C=100, gamma=0.01, kernel=rbf;, score=0.659 total time=  22.8s\n[CV 2/5] END .....C=100, gamma=0.01, kernel=rbf;, score=0.640 total time=  22.9s\n[CV 3/5] END .....C=100, gamma=0.01, kernel=rbf;, score=0.661 total time=  22.9s\n[CV 4/5] END .....C=100, gamma=0.01, kernel=rbf;, score=0.661 total time=  22.8s\n[CV 5/5] END .....C=100, gamma=0.01, kernel=rbf;, score=0.656 total time=  22.8s\n[CV 1/5] END ..C=100, gamma=0.01, kernel=linear;, score=0.619 total time=  41.3s\n[CV 2/5] END ..C=100, gamma=0.01, kernel=linear;, score=0.603 total time=  41.5s\n[CV 3/5] END ..C=100, gamma=0.01, kernel=linear;, score=0.624 total time=  43.3s\n[CV 4/5] END ..C=100, gamma=0.01, kernel=linear;, score=0.609 total time=  38.0s\n[CV 5/5] END ..C=100, gamma=0.01, kernel=linear;, score=0.612 total time=  38.7s\n[CV 1/5] END ....C=100, gamma=0.01, kernel=poly;, score=0.328 total time=  35.4s\n[CV 2/5] END ....C=100, gamma=0.01, kernel=poly;, score=0.328 total time=  35.8s\n[CV 3/5] END ....C=100, gamma=0.01, kernel=poly;, score=0.328 total time=  35.7s\n[CV 4/5] END ....C=100, gamma=0.01, kernel=poly;, score=0.328 total time=  35.9s\n[CV 5/5] END ....C=100, gamma=0.01, kernel=poly;, score=0.328 total time=  35.7s\n[CV 1/5] END .C=100, gamma=0.01, kernel=sigmoid;, score=0.668 total time=  23.3s\n[CV 2/5] END .C=100, gamma=0.01, kernel=sigmoid;, score=0.634 total time=  23.2s\n[CV 3/5] END .C=100, gamma=0.01, kernel=sigmoid;, score=0.667 total time=  23.4s\n[CV 4/5] END .C=100, gamma=0.01, kernel=sigmoid;, score=0.664 total time=  23.3s\n[CV 5/5] END .C=100, gamma=0.01, kernel=sigmoid;, score=0.660 total time=  23.6s\n[CV 1/5] END ......C=100, gamma=0.1, kernel=rbf;, score=0.638 total time=  22.7s\n[CV 2/5] END ......C=100, gamma=0.1, kernel=rbf;, score=0.624 total time=  23.3s\n[CV 3/5] END ......C=100, gamma=0.1, kernel=rbf;, score=0.634 total time=  23.4s\n[CV 4/5] END ......C=100, gamma=0.1, kernel=rbf;, score=0.635 total time=  23.4s\n[CV 5/5] END ......C=100, gamma=0.1, kernel=rbf;, score=0.634 total time=  23.4s\n[CV 1/5] END ...C=100, gamma=0.1, kernel=linear;, score=0.619 total time=  41.1s\n[CV 2/5] END ...C=100, gamma=0.1, kernel=linear;, score=0.603 total time=  41.6s\n[CV 3/5] END ...C=100, gamma=0.1, kernel=linear;, score=0.624 total time=  43.5s\n[CV 4/5] END ...C=100, gamma=0.1, kernel=linear;, score=0.609 total time=  38.3s\n[CV 5/5] END ...C=100, gamma=0.1, kernel=linear;, score=0.612 total time=  39.8s\n[CV 1/5] END .....C=100, gamma=0.1, kernel=poly;, score=0.328 total time=  40.8s\n[CV 2/5] END .....C=100, gamma=0.1, kernel=poly;, score=0.328 total time=  41.5s\n[CV 3/5] END .....C=100, gamma=0.1, kernel=poly;, score=0.328 total time=  41.6s\n[CV 4/5] END .....C=100, gamma=0.1, kernel=poly;, score=0.328 total time=  41.3s\n[CV 5/5] END .....C=100, gamma=0.1, kernel=poly;, score=0.328 total time=  41.1s\n[CV 1/5] END ..C=100, gamma=0.1, kernel=sigmoid;, score=0.629 total time=  22.7s\n[CV 2/5] END ..C=100, gamma=0.1, kernel=sigmoid;, score=0.626 total time=  22.6s\n[CV 3/5] END ..C=100, gamma=0.1, kernel=sigmoid;, score=0.636 total time=  22.7s\n[CV 4/5] END ..C=100, gamma=0.1, kernel=sigmoid;, score=0.633 total time=  22.8s\n[CV 5/5] END ..C=100, gamma=0.1, kernel=sigmoid;, score=0.638 total time=  22.7s\n[CV 1/5] END ........C=100, gamma=1, kernel=rbf;, score=0.679 total time=  34.3s\n[CV 2/5] END ........C=100, gamma=1, kernel=rbf;, score=0.660 total time=  34.7s\n[CV 3/5] END ........C=100, gamma=1, kernel=rbf;, score=0.669 total time=  34.9s\n[CV 4/5] END ........C=100, gamma=1, kernel=rbf;, score=0.682 total time=  34.7s\n[CV 5/5] END ........C=100, gamma=1, kernel=rbf;, score=0.666 total time=  34.8s\n[CV 1/5] END .....C=100, gamma=1, kernel=linear;, score=0.619 total time=  41.0s\n[CV 2/5] END .....C=100, gamma=1, kernel=linear;, score=0.603 total time=  41.4s\n[CV 3/5] END .....C=100, gamma=1, kernel=linear;, score=0.624 total time=  43.3s\n[CV 4/5] END .....C=100, gamma=1, kernel=linear;, score=0.609 total time=  38.6s\n[CV 5/5] END .....C=100, gamma=1, kernel=linear;, score=0.612 total time=  39.5s\n[CV 1/5] END .......C=100, gamma=1, kernel=poly;, score=0.637 total time=  35.9s\n[CV 2/5] END .......C=100, gamma=1, kernel=poly;, score=0.629 total time=  36.2s\n[CV 3/5] END .......C=100, gamma=1, kernel=poly;, score=0.640 total time=  36.0s\n[CV 4/5] END .......C=100, gamma=1, kernel=poly;, score=0.650 total time=  36.1s\n[CV 5/5] END .......C=100, gamma=1, kernel=poly;, score=0.644 total time=  36.0s\n[CV 1/5] END ....C=100, gamma=1, kernel=sigmoid;, score=0.577 total time=  24.2s\n[CV 2/5] END ....C=100, gamma=1, kernel=sigmoid;, score=0.569 total time=  24.1s\n[CV 3/5] END ....C=100, gamma=1, kernel=sigmoid;, score=0.594 total time=  26.1s\n[CV 4/5] END ....C=100, gamma=1, kernel=sigmoid;, score=0.566 total time=  25.2s\n[CV 5/5] END ....C=100, gamma=1, kernel=sigmoid;, score=0.583 total time=  24.3s\nGrid search complete with best parameters: {'C': 1, 'gamma': 1, 'kernel': 'rbf'}\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ***BERT ResourceExhaustionError***"
      ],
      "metadata": {
        "id": "YSrt25zQbw_U"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "f79863e3-3c97-4cad-a6f7-2debcb1a9495"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "44837a48-2df9-43bd-8a4e-a45c5db35373",
        "outputId": "7036b633-0eb0-4912-a775-76c34e846c5b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]"
            ]
          },
          "execution_count": 2,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "tf.config.list_physical_devices('GPU')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1aad1764-a999-43c3-93de-ba56bc46ed9a",
        "outputId": "5ad83b51-f782-4b90-d952-3a456337d75c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From C:\\Users\\Ghassan\\AppData\\Local\\Temp\\ipykernel_2032\\337460670.py:1: is_gpu_available (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Use `tf.config.list_physical_devices('GPU')` instead.\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "execution_count": 2,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "tf.test.is_gpu_available()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cc3d9ec7-a3ac-400d-a2f4-317497321be1"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "from transformers import TFAutoModel, AutoTokenizer\n",
        "from datasets import load_dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3edd1227-f494-4b11-82ef-6dec2e4d749b",
        "outputId": "05198720-b8e4-47ea-dcd9-22f687d19962"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\huggingface_hub\\file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n",
            "  warnings.warn(\n",
            "Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFBertModel: ['cls.seq_relationship.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.seq_relationship.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.bias']\n",
            "- This IS expected if you are initializing TFBertModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n",
            "- This IS NOT expected if you are initializing TFBertModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\n",
            "All the weights of TFBertModel were initialized from the PyTorch model.\n",
            "If your task is similar to the task the model of the checkpoint was trained on, you can already use TFBertModel for predictions without further training.\n"
          ]
        }
      ],
      "source": [
        "model = TFAutoModel.from_pretrained(\"bert-base-uncased\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "d65fcec0-7a38-4029-9d97-4d4b0e217e68",
        "outputId": "6f49627e-ddb9-456e-fd9e-ce4de2006025"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\huggingface_hub\\file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "tokenizer = AutoTokenizer.from_pretrained(\"bert-base-uncased\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "34c78744-bd66-42ea-add5-505d195b28df",
        "outputId": "beb16222-9ed8-4071-c993-7d74dd55e225"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "{'input_ids': <tf.Tensor: shape=(2, 6), dtype=int32, numpy=\n",
              "array([[ 101, 7592, 2088,  102,    0,    0],\n",
              "       [ 101, 7632, 2129, 2024, 2017,  102]])>, 'token_type_ids': <tf.Tensor: shape=(2, 6), dtype=int32, numpy=\n",
              "array([[0, 0, 0, 0, 0, 0],\n",
              "       [0, 0, 0, 0, 0, 0]])>, 'attention_mask': <tf.Tensor: shape=(2, 6), dtype=int32, numpy=\n",
              "array([[1, 1, 1, 1, 0, 0],\n",
              "       [1, 1, 1, 1, 1, 1]])>}"
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "inputs = tokenizer(['Hello world', 'Hi how are you'], padding=True, truncation=True,\n",
        "                  return_tensors='tf')\n",
        "inputs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8116d996-3e9c-4eca-96b9-c09815366362",
        "outputId": "677218a9-a267-4917-b73c-6e788723f64f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "TFBaseModelOutputWithPoolingAndCrossAttentions(last_hidden_state=<tf.Tensor: shape=(2, 6, 768), dtype=float32, numpy=\n",
              "array([[[-0.16896018,  0.13624057, -0.13912933, ..., -0.62499744,\n",
              "          0.05198716,  0.3669134 ],\n",
              "        [-0.36181024,  0.14122054,  0.879518  , ...,  0.10413864,\n",
              "          0.28857005,  0.37247932],\n",
              "        [-0.6981427 , -0.6996524 ,  0.06471574, ..., -0.22044905,\n",
              "          0.0095772 , -0.594116  ],\n",
              "        [ 0.8303979 ,  0.12360072, -0.15052852, ...,  0.10292841,\n",
              "         -0.67793447, -0.2628924 ],\n",
              "        [-0.40222886, -0.01907711,  0.57344025, ..., -0.20642702,\n",
              "          0.02301594,  0.20093198],\n",
              "        [-0.62215674, -0.2739078 ,  0.18204452, ..., -0.12906477,\n",
              "         -0.03840569, -0.05737919]],\n",
              "\n",
              "       [[ 0.09264632, -0.02646403, -0.12248825, ..., -0.21053253,\n",
              "          0.17378972,  0.17258386],\n",
              "        [ 0.40763476, -0.0594372 ,  0.5522687 , ..., -0.67879695,\n",
              "          0.6547636 , -0.29425576],\n",
              "        [-0.21154226, -0.6857797 , -0.4622425 , ...,  0.15354559,\n",
              "          0.5970932 , -0.9110154 ],\n",
              "        [ 0.3991181 , -1.3206401 , -0.0796432 , ..., -0.3211318 ,\n",
              "          0.25494185, -0.5782182 ],\n",
              "        [-0.07572441, -1.3400533 ,  0.18109274, ...,  0.07518291,\n",
              "          0.40248725, -0.7077015 ],\n",
              "        [ 0.59884113, -0.2838632 , -0.34848946, ...,  0.30479366,\n",
              "         -0.43722746, -0.21062526]]], dtype=float32)>, pooler_output=<tf.Tensor: shape=(2, 768), dtype=float32, numpy=\n",
              "array([[-0.90622205, -0.31129706, -0.6218998 , ..., -0.3057421 ,\n",
              "        -0.6401851 ,  0.91671216],\n",
              "       [-0.9308773 , -0.33777916, -0.62099165, ..., -0.4395669 ,\n",
              "        -0.681135  ,  0.9348401 ]], dtype=float32)>, past_key_values=None, hidden_states=None, attentions=None, cross_attentions=None)"
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "output = model(inputs)\n",
        "output"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "994f5195-7b61-45d2-ae2f-721d5cf7e9ec"
      },
      "outputs": [],
      "source": [
        "from datasets import load_dataset, DatasetDict\n",
        "\n",
        "# Load dataset\n",
        "dataset = load_dataset('csv', data_files='data.csv')['train']\n",
        "\n",
        "# Define the sizes for train, validation, and test splits\n",
        "train_size = int(0.8 * len(dataset))\n",
        "val_size = int(0.1 * len(dataset))\n",
        "test_size = int(0.1 * len(dataset))\n",
        "\n",
        "# Shuffle the dataset\n",
        "dataset = dataset.shuffle(seed=42)\n",
        "\n",
        "# Split the dataset into train, validation, and test sets\n",
        "train_dataset = dataset.select(range(train_size))\n",
        "val_dataset = dataset.select(range(train_size, train_size + val_size))\n",
        "test_dataset = dataset.select(range(train_size + val_size, len(dataset)))\n",
        "\n",
        "# Create a DatasetDict with the splits\n",
        "split_dataset = DatasetDict({\n",
        "    'train': train_dataset,\n",
        "    'validation': val_dataset,\n",
        "    'test': test_dataset\n",
        "})"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "205c0dbc-b483-4d17-96b7-28984a8fe35c",
        "outputId": "aba5b228-8830-4f4f-fafc-143cbee91d46"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "DatasetDict({\n",
              "    train: Dataset({\n",
              "        features: ['condition_label', 'medical_abstract'],\n",
              "        num_rows: 9240\n",
              "    })\n",
              "    validation: Dataset({\n",
              "        features: ['condition_label', 'medical_abstract'],\n",
              "        num_rows: 1155\n",
              "    })\n",
              "    test: Dataset({\n",
              "        features: ['condition_label', 'medical_abstract'],\n",
              "        num_rows: 1155\n",
              "    })\n",
              "})"
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "split_dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fdbd9875-2fa5-4686-974a-429e3daca9aa"
      },
      "outputs": [],
      "source": [
        "def tokenize(batch):\n",
        "    return tokenizer(batch[\"medical_abstract\"], padding=True, truncation=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7e1694eb-ca8e-403a-b670-8f25f7892ee8"
      },
      "outputs": [],
      "source": [
        "data_encoded = split_dataset.map(tokenize, batched=True, batch_size=None)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "f96c1bea-4d98-4312-b5e1-e92f0bd68311",
        "outputId": "d96dbd84-255d-4e3c-ef28-16ad4cceaa1b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "DatasetDict({\n",
              "    train: Dataset({\n",
              "        features: ['condition_label', 'medical_abstract', 'input_ids', 'token_type_ids', 'attention_mask'],\n",
              "        num_rows: 9240\n",
              "    })\n",
              "    validation: Dataset({\n",
              "        features: ['condition_label', 'medical_abstract', 'input_ids', 'token_type_ids', 'attention_mask'],\n",
              "        num_rows: 1155\n",
              "    })\n",
              "    test: Dataset({\n",
              "        features: ['condition_label', 'medical_abstract', 'input_ids', 'token_type_ids', 'attention_mask'],\n",
              "        num_rows: 1155\n",
              "    })\n",
              "})"
            ]
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data_encoded"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "18d86455-69c0-4135-a070-56775db8a495"
      },
      "outputs": [],
      "source": [
        "# setting 'input_ids', 'attention_mask', 'token_type_ids', and 'label'\n",
        "# to the tensorflow format. Now if you access this dataset you will get these\n",
        "# columns in `tf.Tensor` format\n",
        "\n",
        "data_encoded.set_format('tf',\n",
        "                            columns=['input_ids', 'attention_mask', 'token_type_ids', 'condition_label'])\n",
        "\n",
        "# setting BATCH_SIZE to 64.\n",
        "BATCH_SIZE = 64\n",
        "\n",
        "def order(inp):\n",
        "    '''\n",
        "    This function will group all the inputs of BERT\n",
        "    into a single dictionary and then output it with\n",
        "    labels.\n",
        "    '''\n",
        "    data = list(inp.values())\n",
        "    return {\n",
        "        'input_ids': data[1],\n",
        "        'attention_mask': data[2],\n",
        "        'token_type_ids': data[3]\n",
        "    }, data[0]\n",
        "\n",
        "# converting train split of `data_encoded` to tensorflow format\n",
        "train_dataset = tf.data.Dataset.from_tensor_slices(data_encoded['train'][:])\n",
        "# set batch_size and shuffle\n",
        "train_dataset = train_dataset.batch(BATCH_SIZE).shuffle(1000)\n",
        "# map the `order` function\n",
        "train_dataset = train_dataset.map(order, num_parallel_calls=tf.data.AUTOTUNE)\n",
        "\n",
        "# ... doing the same for test set ...\n",
        "test_dataset = tf.data.Dataset.from_tensor_slices(data_encoded['test'][:])\n",
        "test_dataset = test_dataset.batch(BATCH_SIZE)\n",
        "test_dataset = test_dataset.map(order, num_parallel_calls=tf.data.AUTOTUNE)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6b811415-50ea-4da8-98dc-752f828a7f02",
        "outputId": "cc249717-afaa-4a90-9ff3-30a127a60f61"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "{'input_ids': <tf.Tensor: shape=(64, 512), dtype=int64, numpy=\n",
            "array([[  101,  2430, 13058, ...,     0,     0,     0],\n",
            "       [  101, 21419, 12403, ...,     0,     0,     0],\n",
            "       [  101, 19077,  3054, ...,     0,     0,     0],\n",
            "       ...,\n",
            "       [  101,  2512,  2378, ...,     0,     0,     0],\n",
            "       [  101, 24023,  1005, ...,     0,     0,     0],\n",
            "       [  101,  9808,  2618, ...,     0,     0,     0]], dtype=int64)>, 'attention_mask': <tf.Tensor: shape=(64, 512), dtype=int64, numpy=\n",
            "array([[0, 0, 0, ..., 0, 0, 0],\n",
            "       [0, 0, 0, ..., 0, 0, 0],\n",
            "       [0, 0, 0, ..., 0, 0, 0],\n",
            "       ...,\n",
            "       [0, 0, 0, ..., 0, 0, 0],\n",
            "       [0, 0, 0, ..., 0, 0, 0],\n",
            "       [0, 0, 0, ..., 0, 0, 0]], dtype=int64)>, 'token_type_ids': <tf.Tensor: shape=(64, 512), dtype=int64, numpy=\n",
            "array([[1, 1, 1, ..., 0, 0, 0],\n",
            "       [1, 1, 1, ..., 0, 0, 0],\n",
            "       [1, 1, 1, ..., 0, 0, 0],\n",
            "       ...,\n",
            "       [1, 1, 1, ..., 0, 0, 0],\n",
            "       [1, 1, 1, ..., 0, 0, 0],\n",
            "       [1, 1, 1, ..., 0, 0, 0]], dtype=int64)>} \n",
            "\n",
            " tf.Tensor(\n",
            "[5 2 3 5 2 4 4 5 2 1 1 2 4 5 5 3 5 5 4 5 4 4 1 4 1 3 5 5 4 5 3 5 1 2 2 5 5\n",
            " 1 3 2 2 3 5 4 2 1 5 4 5 5 4 1 5 5 2 1 5 3 2 2 4 4 1 3], shape=(64,), dtype=int64)\n"
          ]
        }
      ],
      "source": [
        "inp, out = next(iter(train_dataset)) # a batch from train_dataset\n",
        "print(inp, '\\n\\n', out)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2791d784-4f4d-4215-a21d-96c5db22e79b"
      },
      "outputs": [],
      "source": [
        "class BERTForClassification(tf.keras.Model):\n",
        "\n",
        "    def __init__(self, bert_model, num_classes):\n",
        "        super().__init__()\n",
        "        self.bert = bert_model\n",
        "        self.fc = tf.keras.layers.Dense(num_classes, activation='softmax')\n",
        "\n",
        "    def call(self, inputs):\n",
        "        x = self.bert(inputs)[1]\n",
        "        return self.fc(x)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "d5342225-71a0-4f73-9e38-fcf66b80a848"
      },
      "outputs": [],
      "source": [
        "classifier = BERTForClassification(model, num_classes=6)\n",
        "\n",
        "classifier.compile(\n",
        "    optimizer=tf.keras.optimizers.Adam(learning_rate=1e-5),\n",
        "    loss=tf.keras.losses.SparseCategoricalCrossentropy(),\n",
        "    metrics=['accuracy']\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bbe34941-9f9b-436b-a2df-9023547d8def",
        "outputId": "e9a791e8-3d88-4b00-faca-7dc9d954556e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/3\n"
          ]
        },
        {
          "ename": "ResourceExhaustedError",
          "evalue": "Graph execution error:\n\nDetected at node 'bert_for_classification/tf_bert_model/bert/embeddings/Gather' defined at (most recent call last):\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\runpy.py\", line 196, in _run_module_as_main\n      return _run_code(code, main_globals, None,\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\runpy.py\", line 86, in _run_code\n      exec(code, run_globals)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\ipykernel_launcher.py\", line 17, in <module>\n      app.launch_new_instance()\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\traitlets\\config\\application.py\", line 992, in launch_instance\n      app.start()\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\ipykernel\\kernelapp.py\", line 701, in start\n      self.io_loop.start()\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\tornado\\platform\\asyncio.py\", line 195, in start\n      self.asyncio_loop.run_forever()\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\asyncio\\windows_events.py\", line 321, in run_forever\n      super().run_forever()\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\asyncio\\base_events.py\", line 603, in run_forever\n      self._run_once()\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\asyncio\\base_events.py\", line 1909, in _run_once\n      handle._run()\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\asyncio\\events.py\", line 80, in _run\n      self._context.run(self._callback, *self._args)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 534, in dispatch_queue\n      await self.process_one()\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 523, in process_one\n      await dispatch(*args)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 429, in dispatch_shell\n      await result\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 767, in execute_request\n      reply_content = await reply_content\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\ipykernel\\ipkernel.py\", line 429, in do_execute\n      res = shell.run_cell(\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\ipykernel\\zmqshell.py\", line 549, in run_cell\n      return super().run_cell(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3051, in run_cell\n      result = self._run_cell(\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3106, in _run_cell\n      result = runner(coro)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\IPython\\core\\async_helpers.py\", line 129, in _pseudo_sync_runner\n      coro.send(None)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3311, in run_cell_async\n      has_raised = await self.run_ast_nodes(code_ast.body, cell_name,\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3493, in run_ast_nodes\n      if await self.run_code(code, result, async_=asy):\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3553, in run_code\n      exec(code_obj, self.user_global_ns, self.user_ns)\n    File \"C:\\Users\\Ghassan\\AppData\\Local\\Temp\\ipykernel_2032\\1957937178.py\", line 1, in <module>\n      history = classifier.fit(\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\training.py\", line 1564, in fit\n      tmp_logs = self.train_function(iterator)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\training.py\", line 1160, in train_function\n      return step_function(self, iterator)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\training.py\", line 1146, in step_function\n      outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\training.py\", line 1135, in run_step\n      outputs = model.train_step(data)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\training.py\", line 993, in train_step\n      y_pred = self(x, training=True)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\training.py\", line 557, in __call__\n      return super().__call__(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\base_layer.py\", line 1097, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 96, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\AppData\\Local\\Temp\\ipykernel_2032\\1789570677.py\", line 9, in call\n      x = self.bert(inputs)[1]\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\training.py\", line 557, in __call__\n      return super().__call__(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\base_layer.py\", line 1097, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 96, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\transformers\\modeling_tf_utils.py\", line 1186, in run_call_with_unpacked_inputs\n      dummies[\"encoder_hidden_states\"] = tf.ones(\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\transformers\\models\\bert\\modeling_tf_bert.py\", line 1213, in call\n      outputs = self.bert(\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\base_layer.py\", line 1097, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 96, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\transformers\\modeling_tf_utils.py\", line 1186, in run_call_with_unpacked_inputs\n      dummies[\"encoder_hidden_states\"] = tf.ones(\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\transformers\\models\\bert\\modeling_tf_bert.py\", line 891, in call\n      embedding_output = self.embeddings(\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\base_layer.py\", line 1097, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 96, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\transformers\\models\\bert\\modeling_tf_bert.py\", line 184, in call\n      if input_ids is not None:\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\transformers\\models\\bert\\modeling_tf_bert.py\", line 186, in call\n      inputs_embeds = tf.gather(params=self.weight, indices=input_ids)\nNode: 'bert_for_classification/tf_bert_model/bert/embeddings/Gather'\nOOM when allocating tensor with shape[64,512,768] and type float on /job:localhost/replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc\n\t [[{{node bert_for_classification/tf_bert_model/bert/embeddings/Gather}}]]\nHint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.\n [Op:__inference_train_function_23717]",
          "output_type": "error",
          "traceback": [
            "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[1;31mResourceExhaustedError\u001b[0m                    Traceback (most recent call last)",
            "Cell \u001b[1;32mIn[18], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m history \u001b[38;5;241m=\u001b[39m \u001b[43mclassifier\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m      2\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtrain_dataset\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m      3\u001b[0m \u001b[43m    \u001b[49m\u001b[43mepochs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m3\u001b[39;49m\n\u001b[0;32m      4\u001b[0m \u001b[43m)\u001b[49m\n",
            "File \u001b[1;32m~\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py:70\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m     67\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n\u001b[0;32m     68\u001b[0m     \u001b[38;5;66;03m# To get the full stack trace, call:\u001b[39;00m\n\u001b[0;32m     69\u001b[0m     \u001b[38;5;66;03m# `tf.debugging.disable_traceback_filtering()`\u001b[39;00m\n\u001b[1;32m---> 70\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m e\u001b[38;5;241m.\u001b[39mwith_traceback(filtered_tb) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m     71\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[0;32m     72\u001b[0m     \u001b[38;5;28;01mdel\u001b[39;00m filtered_tb\n",
            "File \u001b[1;32m~\\anaconda3\\envs\\py310\\lib\\site-packages\\tensorflow\\python\\eager\\execute.py:54\u001b[0m, in \u001b[0;36mquick_execute\u001b[1;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[0;32m     52\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m     53\u001b[0m   ctx\u001b[38;5;241m.\u001b[39mensure_initialized()\n\u001b[1;32m---> 54\u001b[0m   tensors \u001b[38;5;241m=\u001b[39m pywrap_tfe\u001b[38;5;241m.\u001b[39mTFE_Py_Execute(ctx\u001b[38;5;241m.\u001b[39m_handle, device_name, op_name,\n\u001b[0;32m     55\u001b[0m                                       inputs, attrs, num_outputs)\n\u001b[0;32m     56\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m core\u001b[38;5;241m.\u001b[39m_NotOkStatusException \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m     57\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m name \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
            "\u001b[1;31mResourceExhaustedError\u001b[0m: Graph execution error:\n\nDetected at node 'bert_for_classification/tf_bert_model/bert/embeddings/Gather' defined at (most recent call last):\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\runpy.py\", line 196, in _run_module_as_main\n      return _run_code(code, main_globals, None,\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\runpy.py\", line 86, in _run_code\n      exec(code, run_globals)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\ipykernel_launcher.py\", line 17, in <module>\n      app.launch_new_instance()\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\traitlets\\config\\application.py\", line 992, in launch_instance\n      app.start()\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\ipykernel\\kernelapp.py\", line 701, in start\n      self.io_loop.start()\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\tornado\\platform\\asyncio.py\", line 195, in start\n      self.asyncio_loop.run_forever()\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\asyncio\\windows_events.py\", line 321, in run_forever\n      super().run_forever()\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\asyncio\\base_events.py\", line 603, in run_forever\n      self._run_once()\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\asyncio\\base_events.py\", line 1909, in _run_once\n      handle._run()\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\asyncio\\events.py\", line 80, in _run\n      self._context.run(self._callback, *self._args)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 534, in dispatch_queue\n      await self.process_one()\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 523, in process_one\n      await dispatch(*args)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 429, in dispatch_shell\n      await result\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 767, in execute_request\n      reply_content = await reply_content\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\ipykernel\\ipkernel.py\", line 429, in do_execute\n      res = shell.run_cell(\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\ipykernel\\zmqshell.py\", line 549, in run_cell\n      return super().run_cell(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3051, in run_cell\n      result = self._run_cell(\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3106, in _run_cell\n      result = runner(coro)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\IPython\\core\\async_helpers.py\", line 129, in _pseudo_sync_runner\n      coro.send(None)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3311, in run_cell_async\n      has_raised = await self.run_ast_nodes(code_ast.body, cell_name,\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3493, in run_ast_nodes\n      if await self.run_code(code, result, async_=asy):\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3553, in run_code\n      exec(code_obj, self.user_global_ns, self.user_ns)\n    File \"C:\\Users\\Ghassan\\AppData\\Local\\Temp\\ipykernel_2032\\1957937178.py\", line 1, in <module>\n      history = classifier.fit(\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\training.py\", line 1564, in fit\n      tmp_logs = self.train_function(iterator)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\training.py\", line 1160, in train_function\n      return step_function(self, iterator)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\training.py\", line 1146, in step_function\n      outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\training.py\", line 1135, in run_step\n      outputs = model.train_step(data)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\training.py\", line 993, in train_step\n      y_pred = self(x, training=True)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\training.py\", line 557, in __call__\n      return super().__call__(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\base_layer.py\", line 1097, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 96, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\AppData\\Local\\Temp\\ipykernel_2032\\1789570677.py\", line 9, in call\n      x = self.bert(inputs)[1]\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\training.py\", line 557, in __call__\n      return super().__call__(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\base_layer.py\", line 1097, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 96, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\transformers\\modeling_tf_utils.py\", line 1186, in run_call_with_unpacked_inputs\n      dummies[\"encoder_hidden_states\"] = tf.ones(\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\transformers\\models\\bert\\modeling_tf_bert.py\", line 1213, in call\n      outputs = self.bert(\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\base_layer.py\", line 1097, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 96, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\transformers\\modeling_tf_utils.py\", line 1186, in run_call_with_unpacked_inputs\n      dummies[\"encoder_hidden_states\"] = tf.ones(\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\transformers\\models\\bert\\modeling_tf_bert.py\", line 891, in call\n      embedding_output = self.embeddings(\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\engine\\base_layer.py\", line 1097, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 96, in error_handler\n      return fn(*args, **kwargs)\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\transformers\\models\\bert\\modeling_tf_bert.py\", line 184, in call\n      if input_ids is not None:\n    File \"C:\\Users\\Ghassan\\anaconda3\\envs\\py310\\lib\\site-packages\\transformers\\models\\bert\\modeling_tf_bert.py\", line 186, in call\n      inputs_embeds = tf.gather(params=self.weight, indices=input_ids)\nNode: 'bert_for_classification/tf_bert_model/bert/embeddings/Gather'\nOOM when allocating tensor with shape[64,512,768] and type float on /job:localhost/replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc\n\t [[{{node bert_for_classification/tf_bert_model/bert/embeddings/Gather}}]]\nHint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.\n [Op:__inference_train_function_23717]"
          ]
        }
      ],
      "source": [
        "history = classifier.fit(\n",
        "    train_dataset,\n",
        "    epochs=3\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "c8671e35-7fa4-4d1e-a55a-cfef4fee56e2"
      },
      "outputs": [],
      "source": [
        "validate_dataset = tf.data.Dataset.from_tensor_slices(emotions_encoded['validation'][:])\n",
        "validate_dataset = validate_dataset.batch(BATCH_SIZE)\n",
        "validate_dataset = validate_dataset.map(order, num_parallel_calls=tf.data.AUTOTUNE)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ea07ba14"
      },
      "outputs": [],
      "source": [
        "classifier.evaluate(validate_dataset)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cb498de3"
      },
      "outputs": [],
      "source": [
        "classifier.evaluate(test_dataset)"
      ]
    }
  ]
}
